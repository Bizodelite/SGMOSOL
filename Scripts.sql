-- Scripts by Darshan STARTS

/*
Deployment script for SSGMSS

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;

GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating User-Defined Table Type [dbo].[IntArrayType]...';


GO
CREATE TYPE [dbo].[IntArrayType] AS TABLE (
    [value] INT NULL);


GO
PRINT N'Creating Procedure [dbo].[SP_DeleteDamagedLocker]...';


GO
CREATE PROCEDURE SP_DeleteDamagedLocker
    @LockerId INT
AS
BEGIN
    BEGIN TRY
        DELETE FROM LOCK_DAMAGED_LOCKERS 
        WHERE LOCKER_ID = @LockerId;
        
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_DeleteLockerCheckOutDet]...';


GO
CREATE PROCEDURE SP_DeleteLockerCheckOutDet
    @CheckOutDetId INT
AS
BEGIN
    BEGIN TRY
        DELETE FROM LOCK_LOCKER_CHECK_OUT_DET_T
        WHERE CHECK_OUT_DET_ID = @CheckOutDetId;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_DeleteLockerDetail]...';


GO
CREATE PROCEDURE SP_DeleteLockerDetail
    @CheckInMstId INT,
    @LockerId INT
AS
BEGIN
    SET NOCOUNT ON;

    DELETE FROM LOCK_LOCKER_CHECK_IN_DET_T
    WHERE CHECK_IN_MST_ID = @CheckInMstId
    AND LOCKER_ID = @LockerId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_FindLocker]...';


GO
CREATE PROCEDURE SP_FindLocker
    @CheckInMstId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT LOCKER_ID
        FROM LOCK_LOCKER_CHECK_IN_DET_T
        WHERE CHECK_IN_MST_ID = @CheckInMstId;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetAnnadanRec]...';


GO
CREATE PROCEDURE SP_GetAnnadanRec
    @strFDate NVARCHAR(50),
    @strTDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    SELECT 
        MST.Entered_By AS Name,
        COUNT(*) AS Totalrecpts,
        SUM(CASE WHEN MST.GUEST = 1 THEN 0 ELSE ISNULL(MST.AMOUNT, 0) END) AS Cash,
        NULL AS heading,
        @strFDate + ' to ' + @strTDate AS period,
        NULL AS subheading,
        'Accounting Period : ' + FY.DISPLAY_VALUE AS AccountingPeriod
    FROM 
        MESS_PRINT_RECEIPT_MST_T MST
        INNER JOIN COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = MST.FY_ID
    WHERE 
        (MST.CTR_MACH_ID = @intCtrMachId OR @intCtrMachId = 0)
        AND (MST.PR_DATE BETWEEN CONVERT(DATETIME, @strFDate, 103) AND CONVERT(DATETIME, @strTDate, 103))
    GROUP BY 
        MST.Entered_By, FY.DISPLAY_VALUE;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetBedAdvanceVouchers]...';


GO
CREATE PROCEDURE SP_GetBedAdvanceVouchers
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @strFromTime NVARCHAR(50),
    @strToTime NVARCHAR(50),
    @intCtrMachId BIGINT,
    @payid BIGINT
AS
BEGIN
    SELECT 
        ISNULL(th.HEADING, '') AS HEADING,
        ISNULL(th.SUBHEADING, '') AS SUBHEADING,
        LOC.Location_Name AS LOCATION_NAME,
        DEPT.Department_Name AS DEPARTMENT_NAME,
        '' AS BhaktNiwas,
        '' AS RoomNo,
        @strFromTime AS FromTime,
        @strToTime AS ToTime,
        CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
        EGDT.Entered_By AS USER_NAME,
        @strFromDate + ' to ' + @strToDate AS PERIOD,
        'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
        EGDT.SERIAL_NO AS IN_RCPT_NO,
        CONVERT(DATETIME, EGDT.IN_DATE, 103) AS IN_DATE,
        LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME1,
        EGDT.NAME AS BHAKT_NAME1,
        EGDT.RENT AS RENT1,
        EGDT.ADVANCE,
        ISNULL(EGDT.NO_OF_BEDS, 0) AS NOROOM,
        EGDT.PLACE AS Place,
        ISNULL(EGDT.MOB_NO, '-') AS Mob_No,
        ISNULL(EGDT.CheckIn_ID, '-') AS CheckIn_ID
    FROM 
        BED_CHECK_IN_MST_T AS EGDT
        INNER JOIN COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN COM_COUNTER_MACHINE_MST_T AS CMST ON EGDT.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN COM_DEPARTMENT_MST_T AS DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN COM_LOCATION_MST_T AS LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        INNER JOIN tbl_print_heading AS th ON 1 = 1
    WHERE 
        EGDT.CHECKOUTSTATUS = 0
        AND (EGDT.DEPT_ID = @intCtrMachId OR @intCtrMachId = 0)
        --AND (EGDT.PaymentType = @payid OR @payid = 0)
    ORDER BY 
        EGDT.IN_DATE;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetBNUserwiseCashReport]...';


GO
CREATE PROCEDURE SP_GetBNUserwiseCashReport
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @strFromTime NVARCHAR(50),
    @strToTime NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    -- Query 1
    SELECT 
        ISNULL(th.heading, '') AS HEADING,
        ISNULL(th.subheading, '') AS SUBHEADING,
        LOC.Location_Name AS LOCATION_NAME,
        DEPT.Department_Name AS DEPARTMENT_NAME,
        CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
        EGDT.Entered_By AS USER_NAME,
        @strFromDate + ' to ' + @strToDate AS PERIOD,
        'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
        EGDT.SERIAL_NO AS IN_RCPT_NO,
        CONVERT(DATETIME, EGDT.IN_DATE, 103) AS IN_DATE,
        LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME1,
        EGDT.NAME AS BHAKT_NAME1,
        EGDT.RENT AS RENT1,
        EGDT.ADVANCE
    FROM 
        BN_ROOM_CHECK_IN_MST_T AS EGDT
        INNER JOIN COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN COM_COUNTER_MACHINE_MST_T AS CMST ON EGDT.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN COM_DEPARTMENT_MST_T AS DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN COM_LOCATION_MST_T AS LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        INNER JOIN tbl_print_heading AS th ON 1 = 1
    WHERE 
        EGDT.CTR_MACH_ID = @intCtrMachId
        AND EGDT.IN_DATE + EGDT.IN_TIME >= @strFromDate + ' ' + @strFromTime
        AND EGDT.IN_DATE + EGDT.IN_TIME <= @strToDate + ' ' + @strToTime
    
    UNION
    
    -- Query 2
    SELECT 
        ISNULL(th.heading, '') AS HEADING,
        ISNULL(th.subheading, '') AS SUBHEADING,
        LOC.Location_Name AS LOCATION_NAME,
        DEPT.Department_Name AS DEPARTMENT_NAME,
        CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
        EGDT.Entered_By AS USER_NAME,
        @strFromDate + ' to ' + @strToDate AS PERIOD,
        'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
        EGDT.SERIAL_NO AS IN_RCPT_NO,
        CONVERT(DATETIME, EGDT1.EXTEND_DATE, 103) AS IN_DATE,
        LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME1,
        EGDT.NAME AS BHAKT_NAME1,
        EGDT1.RENT AS RENT1,
        0 AS ADVANCE
    FROM 
        BN_ROOM_EXTEND_T AS EGDT1
        INNER JOIN BN_ROOM_CHECK_IN_MST_T AS EGDT ON EGDT.CHECK_IN_MST_ID = EGDT1.CHECK_IN_MST_ID
        INNER JOIN COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN COM_COUNTER_MACHINE_MST_T AS CMST ON EGDT.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN COM_DEPARTMENT_MST_T AS DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN COM_LOCATION_MST_T AS LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        INNER JOIN tbl_print_heading AS th ON 1 = 1
    WHERE 
        EGDT1.CTR_MACH_ID = @intCtrMachId
        AND EGDT1.ENTERED_ON >= @strFromDate + ' ' + @strFromTime
        AND EGDT1.ENTERED_ON <= @strToDate + ' ' + @strToTime
    
    -- Query 3
    DECLARE @FinalAmount DECIMAL(18, 2)
    SET @FinalAmount = (
        (SELECT ISNULL(SUM(EGDT.RENT), 0)
         FROM BN_ROOM_EXTEND_T AS EGDT
         WHERE EGDT.CTR_MACH_ID = @intCtrMachId
           AND EGDT.ENTERED_ON >= @strFromDate + ' ' + @strFromTime
           AND EGDT.ENTERED_ON <= @strToDate + ' ' + @strToTime)
        +
        (SELECT ISNULL(SUM(EGDT.ADVANCE + EGDT.RENT), 0)
         FROM BN_ROOM_CHECK_IN_MST_T AS EGDT
         WHERE EGDT.CTR_MACH_ID = @intCtrMachId
           AND EGDT.IN_DATE + EGDT.IN_TIME >= @strFromDate + ' ' + @strFromTime
           AND EGDT.IN_DATE + EGDT.IN_TIME <= @strToDate + ' ' + @strToTime)
        -
        (SELECT ISNULL(SUM(REFUND), 0)
         FROM BN_ROOM_CHECK_OUT_MST_T AS EGDT
         WHERE EGDT.CTR_MACH_ID = @intCtrMachId
           AND EGDT.OUT_DATE + EGDT.OUT_TIME >= @strFromDate + ' ' + @strFromTime
           AND EGDT.OUT_DATE + EGDT.OUT_TIME <= @strToDate + ' ' + @strToTime)
    )
    SELECT @FinalAmount AS FinalAmt;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetCheckinLockerUserWise]...';


GO
CREATE PROCEDURE SP_GetCheckinLockerUserWise
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @FromTime NVARCHAR(50),
    @ToTime NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT
            ISNULL((SELECT HEADING FROM TBL_PRINT_HEADING), '') AS HEADING,
            ISNULL((SELECT SUBHEADING FROM TBL_PRINT_HEADING), '') AS SUBHEADING,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            @FromTime AS FromTime,
            @ToTime AS ToTime,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
            SUM(ISNULL(MDT.ADVANCE + MDT.RENT, 0)) AS TOTAL_AMOUNT,
            COUNT(ISNULL(MDT.CHECK_IN_MST_ID, 0)) AS TOTAL_RECEIPT
        FROM
            LOCK_LOCKER_CHECK_IN_MST_T MDT
        JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON MDT.FY_ID = FY.Financial_Year_Id
        JOIN
            COM_COUNTER_MACHINE_MST_T CMT ON MDT.CTR_MACH_ID = CMT.CTR_MACH_ID
        JOIN
            sec_user_mst_t UMT ON UMT.User_Id = MDT.User_Id
        JOIN
            COM_LOCATION_MST_T LMT ON CMT.LOC_ID = LMT.Location_Id
        JOIN
            COM_DEPARTMENT_MST_T DMT ON DMT.Department_Id = CMT.DEPT_ID
        WHERE
            (@CtrMachId = 0 OR MDT.LOC_ID = @CtrMachId)
            AND (@FromDate = '' OR MDT.IN_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR MDT.IN_DATE <= CONVERT(DATETIME, @ToDate, 103))
            AND (@FromTime = '' OR MDT.IN_TIME >= @FromTime)
            AND (@ToTime = '' OR MDT.IN_TIME <= @ToTime)
        GROUP BY
            MDT.User_Id, UMT.User_First_Name, UMT.User_Last_Name, FY.DISPLAY_VALUE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetCheckoutLockerUserWise]...';


GO
CREATE PROCEDURE SP_GetCheckoutLockerUserWise
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @FromTime NVARCHAR(50),
    @ToTime NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT
            ISNULL((SELECT HEADING FROM TBL_PRINT_HEADING), '') AS HEADING,
            ISNULL((SELECT SUBHEADING FROM TBL_PRINT_HEADING), '') AS SUBHEADING,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            @FromTime AS FromTime,
            @ToTime AS ToTime,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
            SUM(ISNULL(MDT.RENT, 0)) AS TOTAL_AMOUNT,
            COUNT(ISNULL(MDT.CHECK_OUT_MST_ID, 0)) AS TOTAL_RECEIPT
        FROM
            LOCK_LOCKER_CHECK_OUT_MST_T MDT
        JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON MDT.FY_ID = FY.Financial_Year_Id
        JOIN
            COM_COUNTER_MACHINE_MST_T CMT ON MDT.CTR_MACH_ID = CMT.CTR_MACH_ID
        JOIN
            sec_user_mst_t UMT ON UMT.User_Id = MDT.User_Id
        JOIN
            COM_LOCATION_MST_T LMT ON CMT.LOC_ID = LMT.Location_Id
        JOIN
            COM_DEPARTMENT_MST_T DMT ON DMT.Department_Id = CMT.DEPT_ID
        WHERE
            (@CtrMachId = 0 OR MDT.LOC_ID = @CtrMachId)
            AND (@FromDate = '' OR MDT.OUT_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR MDT.OUT_DATE <= CONVERT(DATETIME, @ToDate, 103))
            AND (@FromTime = '' OR MDT.OUT_TIME >= @FromTime)
            AND (@ToTime = '' OR MDT.OUT_TIME <= @ToTime)
        GROUP BY
            MDT.User_Id, UMT.User_First_Name, UMT.User_Last_Name, FY.DISPLAY_VALUE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetChequeReptDetail]...';


GO
CREATE PROCEDURE SP_GetChequeReptDetail
    @Date NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT
            ISNULL(th.heading, '') AS HEADING,
            ISNULL(th.subheading, '') AS SUBHEADING,
            dmt.TYPE,
            SUM(den.AMOUNT) AS AMOUNT,
            @Date AS prntdate,
            (
                SELECT ISNULL(umt.User_First_Name, '') + ' ' + ISNULL(umt.User_Last_Name, '')
                FROM DEN_DENGI_RECEIPT_MST_T dmt
                INNER JOIN sec_user_mst_t umt ON dmt.user_id = umt.user_id
                WHERE dmt.DENGI_RECEIPT_ID = (
                        SELECT MAX(dbo.DEN_DENGI_RECEIPT_MST_T.DENGI_RECEIPT_ID)
                        FROM DEN_DENGI_RECEIPT_MST_T
                        WHERE DR_DATE = CONVERT(DATETIME, @Date, 103)
                    )
            ) AS USER_NAME,
            'Accounting Period : ' + fy.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            loc.Location_Name AS LOCATION_NAME,
            cmst.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            dept.Department_Name AS DEPT_NAME,
            (
                SELECT MAX(dbo.DEN_DENGI_RECEIPT_MST_T.DENGI_RECEIPT_ID)
                FROM DEN_DENGI_RECEIPT_MST_T
                WHERE DR_DATE = CONVERT(DATETIME, @Date, 103)
            ) AS LAST_RECEIPT_NO,
            (
                SELECT MIN(dbo.DEN_DENGI_RECEIPT_MST_T.DENGI_RECEIPT_ID)
                FROM DEN_DENGI_RECEIPT_MST_T
                WHERE DR_DATE = CONVERT(DATETIME, @Date, 103)
            ) AS FIRST_RECEIPT_NO
        FROM dbo.DEN_DENGI_MASTER_T dmt
        INNER JOIN dbo.DEN_DENGI_RECEIPT_MST_T den ON dmt.DENGI_MST_ID = den.DENGI_MST_ID
        INNER JOIN COM_LOCATION_MST_T loc ON den.LOC_ID = loc.LOCATION_ID
        INNER JOIN COM_COUNTER_MACHINE_MST_T cmst ON den.CTR_MACH_ID = cmst.CTR_MACH_ID
        INNER JOIN COM_DEPARTMENT_MST_T dept ON cmst.DEPT_ID = dept.DEPARTMENT_ID
        INNER JOIN COM_FINANCIAL_YEAR_MST_T fy ON fy.Financial_Year_Id = den.FY_ID
        CROSS JOIN tbl_print_heading th
        WHERE
            (@CtrMachId = 0 OR den.CTR_MACH_ID = @CtrMachId)
            AND (@Date = '' OR den.DR_DATE = CONVERT(DATETIME, @Date, 103))
            AND dmt.TYPE IN ('Dengi', 'Imarat Nidhi')
            AND PAYMENT_TYPE_ID = 7
        GROUP BY
		th.heading,th.subheading,
            loc.Location_Name,
            cmst.COUNTER_MACHINE_TITLE,
            dmt.TYPE,
            dept.Department_Name,
            fy.DISPLAY_VALUE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetCountries]...';


GO
CREATE PROCEDURE SP_GetCountries
AS
BEGIN
    SELECT CountryID, CountryName FROM Countries;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetCurrency]...';


GO
CREATE PROCEDURE SP_GetCurrency
AS
BEGIN
    SELECT Lookup_Value_Name, Lookup_Value_Order
    FROM COM_LOOKUP_VALUES_MST_V
    WHERE Lookup_Id = 8;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyDengi]...';


GO
CREATE PROCEDURE SP_GetDailyDengi
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT 
            ISNULL((SELECT HEADING FROM TBL_PRINT_HEADING), '') AS HEADING,
            ISNULL((SELECT SUBHEADING FROM TBL_PRINT_HEADING), '') AS SUBHEADING,
            DMT.TYPE,
            SUM(den.AMOUNT) AS AMOUNT,
            @strDate AS prntdate,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS USER_NAME,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            LOC.Location_Name AS LOCATION_NAME,
            CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            DEPT.Department_Name AS DEPT_NAME,
            (SELECT MAX(dbo.DEN_DENGI_RECEIPT_MST_T.DENGI_RECEIPT_ID) FROM DEN_DENGI_RECEIPT_MST_T WHERE DR_DATE = CONVERT(DATETIME, @strDate, 103)) AS LAST_RECEIPT_NO,
            (SELECT MIN(dbo.DEN_DENGI_RECEIPT_MST_T.DENGI_RECEIPT_ID) FROM DEN_DENGI_RECEIPT_MST_T WHERE DR_DATE = CONVERT(DATETIME, @strDate, 103)) AS FIRST_RECEIPT_NO
        FROM
            dbo.DEN_DENGI_MASTER_T DMT
        INNER JOIN
            dbo.DEN_DENGI_RECEIPT_MST_T DEN ON DMT.DENGI_MST_ID = DEN.DENGI_MST_ID
        INNER JOIN
            COM_LOCATION_MST_T LOC ON DEN.LOC_ID = LOC.LOCATION_ID
        INNER JOIN
            COM_COUNTER_MACHINE_MST_T CMST ON DEN.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN
            COM_DEPARTMENT_MST_T DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = DEN.FY_ID
        LEFT JOIN
            sec_user_mst_t UMT ON DEN.user_id = UMT.user_id
        WHERE
            (DEN.CTR_MACH_ID = @intCtrMachId OR @intCtrMachId = 0)
            AND (DR_DATE = CONVERT(DATETIME, @strDate, 103) OR @strDate = '')
        GROUP BY
            LOC.Location_Name, CMST.COUNTER_MACHINE_TITLE, DMT.TYPE, DEPT.Department_Name, FY.DISPLAY_VALUE,ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '');

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyDengiMessData]...';


GO
CREATE PROCEDURE SP_GetDailyDengiMessData
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT
            NULL AS dengicounter,
            MIN(MST.SERIAL_NO) AS FIRST_RECEIPT_NO,
            SUM(CASE WHEN MST.GUEST = 1 THEN 0 ELSE ISNULL(MST.AMOUNT, 0) END) AS total_amount,
            (SELECT ISNULL(UMT.User_First_Name, '') + '   ' + ISNULL(UMT.User_Last_Name, '') AS User_Name
             FROM sec_user_mst_t UMT
             INNER JOIN MESS_PRINT_RECEIPT_MST_T PMT1 ON UMT.user_id = PMT1.user_id
             WHERE serial_no = (SELECT MAX(SERIAL_NO)
                                FROM MESS_PRINT_RECEIPT_MST_T
                                WHERE PR_DATE = PMT1.PR_DATE
                                  AND CTR_MACH_ID = PMT1.CTR_MACH_ID)
               AND PMT1.PR_DATE = MST.PR_DATE
               AND PMT1.CTR_MACH_ID = MST.CTR_MACH_ID) AS USER_NAME,
            MAX(MST.SERIAL_NO) AS LAST_RECEIPT_NO,
            CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            CONVERT(VARCHAR, MST.PR_DATE, 103) AS pr_date,
            NULL AS heading,
            NULL AS dept_date,
            NULL AS subheading,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS Accounting_Period,
            LOC.Location_Name AS Location_Name,
            DEPT.Department_Name AS Department_Name
        FROM
            MESS_PRINT_RECEIPT_MST_T MST
        INNER JOIN
            COM_COUNTER_MACHINE_MST_T CMST ON MST.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN
            sec_user_mst_t AS UMT ON UMT.User_Id = MST.USER_ID
        INNER JOIN
            COM_DEPARTMENT_MST_T DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN
            COM_LOCATION_MST_T LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        INNER JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = MST.FY_ID
        WHERE
            (@intCtrMachId = 0 OR MST.CTR_MACH_ID = @intCtrMachId)
            AND (@strDate = '' OR PR_DATE = CONVERT(DATETIME, @strDate, 103))
        GROUP BY
            PR_DATE, CMST.COUNTER_MACHINE_TITLE, MST.CTR_MACH_ID, LOC.Location_Name, DEPT.Department_Name, FY.DISPLAY_VALUE, UMT.User_First_Name, UMT.User_Last_Name, UMT.User_Id;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyDengiReceiptDetails]...';


GO
CREATE PROCEDURE SP_GetDailyDengiReceiptDetails
    @FDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT
            FIRST_RECEIPT_NO,
            LAST_RECEIPT_NO,
            TOTAL_AMOUNT,
            COUNTER_MACHINE_TITLE,
            CASE WHEN ISNULL(Location_Name, '') = '' THEN '' ELSE 'Location :' + Location_Name END AS Location_Name,
            CASE WHEN ISNULL(Department_Name, '') = '' THEN '' ELSE 'Sublocation :' + Department_Name END AS Department_Name,
            @FDate AS PR_DATE,
            'Accounting Period : ' + DISPLAY_VALUE AS AccountingPeriod,
            USER_NAME
        FROM
            DEN_Daily_DENGI_RECEIPT_VW
        WHERE
            (@CtrMachId = 0 OR CTR_MACH_ID = @CtrMachId)
            AND (@FDate = '' OR DR_DATE = CONVERT(DATETIME, @FDate, 103));

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyDengiUserNames]...';


GO
CREATE PROCEDURE SP_GetDailyDengiUserNames
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT DISTINCT ISNULL(MST.ENTERED_BY, '') AS ENTERED_BY
        FROM MESS_PRINT_RECEIPT_MST_T MST
        WHERE
            (MST.CTR_MACH_ID = @intCtrMachId OR @intCtrMachId = 0)
            AND (MST.PR_DATE = CONVERT(DATETIME, @strDate, 103) OR @strDate = '');
        
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyLockerCheckIn]...';


GO
CREATE PROCEDURE SP_GetDailyLockerCheckIn
    @FromDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            ISNULL(FIRST_RECEIPT_NO, 0) AS FIRST_RECEIPT_NO,
            ISNULL(LAST_RECEIPT_NO, 0) AS LAST_RECEIPT_NO,
            ISNULL(TOTAL_AMOUNT, 0) AS TOTAL_AMOUNT,
            ISNULL(Heading, '') AS Heading,
            ISNULL(subheading, '') AS subheading,
            ISNULL(COUNTER_MACHINE_TITLE, '') AS COUNTER_MACHINE_TITLE,
            USER_NAME AS USER_NAME,
            CONVERT(VARCHAR, IN_DATE, 103) AS prntdate,
            'Location : ' + ISNULL(Location_Name, '-') + '        Sublocation : ' + ISNULL(Department_Name, '-') AS Location_Name,
            ISNULL(Department_Name, '') AS Department_Name,
            'Accounting Period : ' + Display_Value AS ACCOUNTING_PERIOD
        FROM 
            LOCKER_CHK_IN_DAILY_RECEIPT_LIST
        WHERE 
            (@CtrMachId = 0 OR Location_Id = @CtrMachId)
            AND (@FromDate = '' OR IN_DATE = CONVERT(DATETIME, @FromDate, 103));
            
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyLockerCheckOut]...';


GO
CREATE PROCEDURE SP_GetDailyLockerCheckOut
    @FromDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            ISNULL(FIRST_RECEIPT_NO, 0) AS FIRST_RECEIPT_NO,
            ISNULL(LAST_RECEIPT_NO, 0) AS LAST_RECEIPT_NO,
            ISNULL(TOTAL_AMOUNT, 0) AS TOTAL_AMOUNT,
            ISNULL(Heading, '') AS Heading,
            ISNULL(subheading, '') AS subheading,
            ISNULL(COUNTER_MACHINE_TITLE, '') AS COUNTER_MACHINE_TITLE,
            USER_NAME AS USER_NAME,
            CONVERT(VARCHAR, OUT_DATE, 103) AS prntdate,
            'Location : ' + ISNULL(Location_Name, '-') + '        Sublocation : ' + ISNULL(Department_Name, '-') AS Location_Name,
            ISNULL(Department_Name, '') AS Department_Name,
            'Accounting Period : ' + Display_Value AS ACCOUNTING_PERIOD
        FROM 
            LOCKER_CHK_OUT_DAILY_RECEIPT_LIST
        WHERE 
            (@CtrMachId = 0 OR Location_Id = @CtrMachId)
            AND (@FromDate = '' OR OUT_DATE = CONVERT(DATETIME, @FromDate, 103));
            
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyRoomCheckIn]...';


GO
CREATE PROCEDURE SP_GetDailyRoomCheckIn
    @FromDate NVARCHAR(50),
    @Sublocind BIGINT,
    @Locid BIGINT,
    @Payid BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT DISTINCT 
            (
                SELECT ISNULL(MIN(COT.SERIAL_NO), 0) 
                FROM BN_ROOM_CHECK_IN_MST_T COT   
                WHERE COT.IN_DATE = PMT.IN_DATE  
                AND (COT.SUBLOC_ID = @Sublocind OR @Sublocind = 0)
                AND (COT.LOC_ID = @Locid OR @Locid = 0)
            ) AS FIRST_RECEIPT_NO,

            (
                SELECT ISNULL(MAX(COT.SERIAL_NO), 0) 
                FROM BN_ROOM_CHECK_IN_MST_T COT   
                WHERE COT.IN_DATE = PMT.IN_DATE  
                AND (COT.SUBLOC_ID = @Sublocind OR @Sublocind = 0)
                AND (COT.LOC_ID = @Locid OR @Locid = 0)
            ) AS LAST_RECEIPT_NO,

            CASE 
                WHEN @Payid = 202 THEN 'Swipe'
                WHEN @Payid = 8 THEN 'Cash'
                WHEN @Payid = 7 THEN 'Cheque'
                ELSE ''
            END AS PaymentType,

            (
                SELECT SUM(COT.RENT)
                FROM BN_ROOM_CHECK_IN_MST_T COT  
                WHERE COT.IN_DATE = PMT.IN_DATE  
                AND (COT.PaymentType = @Payid OR @Payid = 0)
                AND (COT.SUBLOC_ID = @Sublocind OR @Sublocind = 0)
                AND (COT.LOC_ID = @Locid OR @Locid = 0)
            ) AS TOTAL_AMOUNT,

            (SELECT ISNULL(HEADING, '') FROM TBL_PRINT_HEADING) AS HEADING,
            (SELECT ISNULL(SUBHEADING, '') FROM TBL_PRINT_HEADING) AS SUBHEADING,
            (SELECT ISNULL(CMT.COUNTER_MACHINE_TITLE, '') FROM COM_COUNTER_MACHINE_MST_T CMT WHERE CMT.CTR_MACH_ID = PMT.CTR_MACH_ID) AS COUNTER_MACHINE_TITLE,
            '' AS USER_NAME,
            CONVERT(VARCHAR, PMT.IN_DATE, 103) AS prntdate,
            'Location : ' + (SELECT ISNULL(LMT.Location_Name, '') FROM COM_LOCATION_MST_T LMT WHERE LMT.Location_Id = PMT.LOC_ID) + '        Sublocation : ' + (SELECT ISNULL(DMT.Department_Name, '') FROM COM_DEPARTMENT_MST_T DMT WHERE DMT.Department_Id = PMT.SUBLOC_ID) AS Location_Name,
            (SELECT ISNULL(DMT.Department_Name, '') FROM COM_DEPARTMENT_MST_T DMT WHERE DMT.Department_Id = PMT.SUBLOC_ID) AS Department_Name,
            'Accounting Period : ' + (SELECT FMT.Display_Value FROM COM_FINANCIAL_YEAR_MST_T FMT WHERE FMT.Financial_Year_Id = PMT.FY_ID) AS ACCOUNTING_PERIOD
        FROM 
            BN_ROOM_CHECK_IN_MST_T PMT
        WHERE 
            (@Sublocind = 0 OR PMT.SUBLOC_ID = @Sublocind)
            AND (@Locid = 0 OR PMT.LOC_ID = @Locid)
            AND (@FromDate = '' OR PMT.IN_DATE = CONVERT(DATETIME, @FromDate, 103));
        
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyRoomCheckOut]...';


GO
CREATE PROCEDURE SP_GetDailyRoomCheckOut
    @FromDate NVARCHAR(50),
    @Sublocind BIGINT,
    @Locid BIGINT,
    @Payid BIGINT,
    @Username NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT DISTINCT 
            (
                SELECT ISNULL(MIN(COT.SERIAL_NO), 0) 
                FROM BN_ROOM_CHECK_OUT_MST_T COT 
                INNER JOIN BN_ROOM_CHECK_IN_MST_T CMT ON PMT.CHECK_IN_MST_ID = CMT.CHECK_IN_MST_ID  
                WHERE COT.OUT_DATE = PMT.OUT_DATE  
                AND (CMT.SUBLOC_ID = @Sublocind OR @Sublocind = 0)
                AND (COT.LOC_ID = @Locid OR @Locid = 0)
            ) AS FIRST_RECEIPT_NO,

            (
                SELECT ISNULL(MAX(COT.SERIAL_NO), 0) 
                FROM BN_ROOM_CHECK_OUT_MST_T COT 
                INNER JOIN BN_ROOM_CHECK_IN_MST_T CMT ON COT.CHECK_IN_MST_ID = CMT.CHECK_IN_MST_ID  
                WHERE COT.OUT_DATE = PMT.OUT_DATE  
                AND (CMT.SUBLOC_ID = @Sublocind OR @Sublocind = 0)
                AND (COT.LOC_ID = @Locid OR @Locid = 0)
            ) AS LAST_RECEIPT_NO,

            CASE 
                WHEN @Payid = 202 THEN 'Swipe'
                WHEN @Payid = 8 THEN 'Cash'
                WHEN @Payid = 7 THEN 'Cheque'
                ELSE ''
            END AS PaymentType,

            (
                SELECT SUM(COT.RENT)
                FROM BN_ROOM_CHECK_OUT_MST_T COT 
                INNER JOIN BN_ROOM_CHECK_IN_MST_T CMT ON COT.CHECK_IN_MST_ID = CMT.CHECK_IN_MST_ID  
                WHERE COT.OUT_DATE = PMT.OUT_DATE  
                AND (CMT.PaymentType = @Payid OR @Payid = 0)
                AND (CMT.SUBLOC_ID = @Sublocind OR @Sublocind = 0)
                AND (COT.LOC_ID = @Locid OR @Locid = 0)
            ) AS TOTAL_AMOUNT,

            (SELECT ISNULL(HEADING, '') FROM TBL_PRINT_HEADING) AS HEADING,
            (SELECT ISNULL(SUBHEADING, '') FROM TBL_PRINT_HEADING) AS SUBHEADING,
            (SELECT ISNULL(CMT.COUNTER_MACHINE_TITLE, '') FROM COM_COUNTER_MACHINE_MST_T CMT WHERE CMT.CTR_MACH_ID = PMT.CTR_MACH_ID) AS COUNTER_MACHINE_TITLE,
            CONVERT(VARCHAR, PMT.OUT_DATE, 103) AS prntdate,
            'Location : ' + (SELECT ISNULL(LMT.Location_Name, '') FROM COM_LOCATION_MST_T LMT WHERE LMT.Location_Id = PMT.LOC_ID) + '        Sublocation : ' + (SELECT ISNULL(DMT.Department_Name, '') FROM COM_DEPARTMENT_MST_T DMT WHERE DMT.Department_Id = CIT.SUBLOC_ID) AS Location_Name,
            (SELECT ISNULL(DMT.Department_Name, '') FROM COM_DEPARTMENT_MST_T DMT WHERE DMT.Department_Id = CIT.SUBLOC_ID) AS Department_Name,
            'Accounting Period : ' + (SELECT FMT.Display_Value FROM COM_FINANCIAL_YEAR_MST_T FMT WHERE FMT.Financial_Year_Id = PMT.FY_ID) AS ACCOUNTING_PERIOD
        FROM 
            BN_ROOM_CHECK_OUT_MST_T PMT
        INNER JOIN 
            BN_ROOM_CHECK_IN_MST_T CIT ON PMT.CHECK_IN_MST_ID = CIT.CHECK_IN_MST_ID
        WHERE 
            (@Sublocind = 0 OR CIT.SUBLOC_ID = @Sublocind)
            AND (@Locid = 0 OR PMT.LOC_ID = @Locid)
            AND (@FromDate = '' OR PMT.OUT_DATE = CONVERT(DATETIME, @FromDate, 103));
        
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherBed]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherBed
    @strDate NVARCHAR(50),
    @intLocId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT LOC.Location_Name AS LOCATION_NAME,
           Convert(char, MIN(BCHECK.OUT_DATE), 103) AS FROM_DATE,
           Convert(char, MAX(BCHECK.OUT_DATE), 103) AS TO_DATE,
           COUNT(BCHECK.CHECK_OUT_MST_ID) AS RECEIPT_COUNT,
           MAX(BCHECK.SERIAL_NO) AS LAST_RECEIPT_NO,
           MIN(BCHECK.SERIAL_NO) AS FIRST_RECEIPT_NO,
           SUM(BCHECK.RENT) AS TOTAL_AMOUNT
    FROM dbo.BED_CHECK_OUT_MST_T BCHECK
    INNER JOIN COM_LOCATION_MST_T LOC ON BCHECK.LOC_ID = LOC.LOCATION_ID
    WHERE 1=1
    AND (@intLocId = 0 OR BCHECK.LOC_ID = @intLocId)
    AND BCHECK.FY_ID = @intFyId
    AND BCHECK.OUT_DATE <= Convert(datetime, @strDate, 103)
    AND BCHECK.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE LOC_ID = @intLocId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
    AND (@toSerialNo = 0 OR BCHECK.SERIAL_NO <= @toSerialNo)
    GROUP BY LOC.Location_Name, BCHECK.OUT_DATE;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherBhaktniwas]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherBhaktniwas
    @strDate NVARCHAR(50),
    @intLocId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT LOC.Location_Name AS LOCATION_NAME,
           Convert(char, MIN(RCHECK.IN_DATE), 103) AS FROM_DATE,
           Convert(char, MAX(RCHECK.IN_DATE), 103) AS TO_DATE,
           COUNT(RCHECK.CHECK_IN_MST_ID) AS RECEIPT_COUNT,
           MAX(RCHECK.SERIAL_NO) AS LAST_RECEIPT_NO,
           MIN(RCHECK.SERIAL_NO) AS FIRST_RECEIPT_NO,
           SUM(RCHECK.RENT) AS TOTAL_AMOUNT
    FROM dbo.BN_ROOM_CHECK_IN_MST_T RCHECK
    INNER JOIN COM_LOCATION_MST_T LOC ON RCHECK.LOC_ID = LOC.LOCATION_ID
    WHERE 1=1
    AND (@intLocId = 0 OR RCHECK.LOC_ID = @intLocId)
    AND RCHECK.FY_ID = @intFyId
    AND RCHECK.IN_DATE <= Convert(datetime, @strDate, 103)
    AND RCHECK.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE LOC_ID = @intLocId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
    AND (@toSerialNo = 0 OR RCHECK.SERIAL_NO <= @toSerialNo)
    GROUP BY LOC.Location_Name;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherBhojnalay]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherBhojnalay
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT LOC.Location_Name AS LOCATION_NAME,
           CMST.COUNTER_MACHINE_TITLE,
           Convert(char, MIN(MESS.PR_DATE), 103) AS FROM_DATE,
           Convert(char, MAX(MESS.PR_DATE), 103) AS TO_DATE,
           COUNT(MESS.PRINT_RECEIPT_MST_ID) AS RECEIPT_COUNT,
           MIN(MESS.SERIAL_NO) AS FIRST_RECEIPT_NO,
           MAX(MESS.SERIAL_NO) AS LAST_RECEIPT_NO,
           SUM(MESS.AMOUNT) AS TOTAL_AMOUNT
    FROM dbo.MESS_PRINT_RECEIPT_MST_T MESS
    INNER JOIN COM_LOCATION_MST_T LOC ON MESS.LOC_ID = LOC.LOCATION_ID
    INNER JOIN COM_COUNTER_MACHINE_MST_T CMST ON CMST.CTR_MACH_ID = MESS.CTR_MACH_ID
    WHERE 1=1
    AND (@intCtrMachId = 0 OR MESS.CTR_MACH_ID = @intCtrMachId)
    AND MESS.FY_ID = @intFyId
    AND MESS.PR_DATE <= Convert(datetime, @strDate, 103)
    AND MESS.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE CTR_MACH_ID = @intCtrMachId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
    AND (@toSerialNo = 0 OR MESS.SERIAL_NO <= @toSerialNo)
    GROUP BY LOC.Location_Name, CMST.COUNTER_MACHINE_TITLE;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherData]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherData
    @DailyId BIGINT
AS
BEGIN
    SELECT *, loc.ERP_COMP_ID, loc.ERP_BRANCH_ID, det.PaymetTypeId, det.PaymentType,
           det.TotalAmount AS detTotalAmount, det.TotalReceipt AS detTotalReceipt, det.TotalReceipt, det.Date,
           ChqDD.DENGI_RECEIPT_ID, ChqDD.SerialNo, ChqDD.DR_DATE,
           ChqDD.AMOUNT, ChqDD.NAME, ChqDD.CHQ_BANK_NAME, ChqDD.CHQ_NO,
           ChqDD.CHQ_DATE, ChqDD.DD_BANK_NAME, ChqDD.DD_NO, ChqDD.DD_DATE, ChqDD.DENGI_TYPE
    FROM dbo.DailyVoucherTransaction AS Daily
    INNER JOIN dbo.COM_LOCATION_MST_T loc ON loc.Location_Id = Daily.LOC_ID
    FULL JOIN DailyVoucherTransactionDet det ON det.DailyVoucherMstId = Daily.ID
    FULL JOIN DailyVoucherTransactionChqDD ChqDD ON ChqDD.DailyVoucherMstId = Daily.ID
    WHERE Daily.ID = @DailyId AND Daily.IsExcel = 1;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherDengi]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherDengi
    @strDate NVARCHAR(50),
    @intLocId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT LOC.Location_Name AS LOCATION_NAME,
           SUM(DEN.AMOUNT) AS TOTAL_AMOUNT,
           Convert(char, MIN(DEN.DR_DATE), 103) AS FROM_DATE,
           Convert(char, MAX(DEN.DR_DATE), 103) AS TO_DATE,
           COUNT(DEN.DENGI_RECEIPT_ID) AS RECEIPT_COUNT,
           MAX(DEN.SERIAL_NO) AS LAST_RECEIPT_NO,
           MIN(DEN.SERIAL_NO) AS FIRST_RECEIPT_NO
    FROM dbo.DEN_DENGI_RECEIPT_MST_T DEN
    INNER JOIN COM_LOCATION_MST_T LOC ON DEN.LOC_ID = LOC.LOCATION_ID
    WHERE 1=1
    AND (@intLocId = 0 OR DEN.LOC_ID = @intLocId)
    AND DEN.FY_ID = @intFyId
    AND DEN.DR_DATE <= Convert(datetime, @strDate, 103)
    AND DEN.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE LOC_ID = @intLocId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
    AND (@toSerialNo = 0 OR DEN.SERIAL_NO <= @toSerialNo)
    GROUP BY LOC.Location_Name;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherEntryGate]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherEntryGate
    @strDate NVARCHAR(50),
    @intLocId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT 
        LOC.Location_Name AS LOCATION_NAME,
        SUM(ENT.AMOUNT) AS TOTAL_AMOUNT,
        Convert(char, MIN(ENT.EG_DATE), 103) AS FROM_DATE,
        Convert(char, MAX(ENT.EG_DATE), 103) AS TO_DATE,
        MAX(ENT.EG_DATE) AS maxDate,
        COUNT(ENT.ENTRY_GATE_DET_ID) AS RECEIPT_COUNT,
        MIN(ENT.SERIAL_NO) AS FIRST_RECEIPT_NO,
        MAX(ENT.SERIAL_NO) AS LAST_RECEIPT_NO
    FROM
        dbo.GAM_ENTRY_GATE_DET_T ENT
    INNER JOIN
        COM_LOCATION_MST_T LOC ON ENT.LOC_ID = LOC.LOCATION_ID
    WHERE
        1 = 1
        AND (@intLocId = 0 OR ENT.LOC_ID = @intLocId)
        AND ENT.FY_ID = @intFyId
        AND ENT.EG_DATE <= Convert(datetime, @strDate, 103)
        AND ENT.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE LOC_ID = @intLocId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
        AND (@toSerialNo = 0 OR ENT.SERIAL_NO <= @toSerialNo)
    GROUP BY 
        LOC.Location_Name;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherGame]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherGame
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT LOC.Location_Name AS LOCATION_NAME,
           CMST.COUNTER_MACHINE_TITLE,
           Convert(char, MIN(GAME.GM_DATE), 103) AS FROM_DATE,
           Convert(char, MAX(GAME.GM_DATE), 103) AS TO_DATE,
           COUNT(GAME.GAME_DET_ID) AS RECEIPT_COUNT,
           MIN(GAME.SERIAL_NO) AS FIRST_RECEIPT_NO,
           MAX(GAME.SERIAL_NO) AS LAST_RECEIPT_NO,
           SUM(GAME.AMOUNT) AS TOTAL_AMOUNT
    FROM dbo.GAM_GAME_DET_T GAME
    INNER JOIN COM_LOCATION_MST_T LOC ON GAME.LOC_ID = LOC.LOCATION_ID
    INNER JOIN COM_COUNTER_MACHINE_MST_T CMST ON CMST.CTR_MACH_ID = GAME.CTR_MACH_ID
    WHERE 1=1
    AND (@intCtrMachId = 0 OR GAME.CTR_MACH_ID = @intCtrMachId)
    AND GAME.FY_ID = @intFyId
    AND GAME.GM_DATE <= Convert(datetime, @strDate, 103)
    AND GAME.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE CTR_MACH_ID = @intCtrMachId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
    AND (@toSerialNo = 0 OR GAME.SERIAL_NO <= @toSerialNo)
    GROUP BY LOC.Location_Name, CMST.COUNTER_MACHINE_TITLE;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherLocker]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherLocker
    @strDate NVARCHAR(50),
    @intLocId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT LOC.Location_Name AS LOCATION_NAME,
           SUM(LOCK.ADVANCE + LOCK.RENT) AS TOTAL_AMOUNT,
           Convert(char, MIN(LOCK.IN_DATE), 103) AS FROM_DATE,
           Convert(char, MAX(LOCK.IN_DATE), 103) AS TO_DATE,
           MAX(LOCK.IN_DATE) AS maxDate,
           COUNT(LOCK.CHECK_IN_MST_ID) AS RECEIPT_COUNT,
           MAX(LOCK.SERIAL_NO) AS LAST_RECEIPT_NO,
           MIN(LOCK.SERIAL_NO) AS FIRST_RECEIPT_NO
    FROM dbo.LOCK_LOCKER_CHECK_IN_MST_T LOCK
    INNER JOIN COM_LOCATION_MST_T LOC ON LOCK.LOC_ID = LOC.LOCATION_ID
    WHERE 1=1
    AND (@intLocId = 0 OR LOCK.LOC_ID = @intLocId)
    AND LOCK.FY_ID = @intFyId
    AND LOCK.IN_DATE <= Convert(datetime, @strDate, 103)
    AND LOCK.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE LOC_ID = @intLocId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
    AND (@toSerialNo = 0 OR LOCK.SERIAL_NO <= @toSerialNo)
    GROUP BY LOC.Location_Name;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherMedical]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherMedical
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT
        LOC.Location_Name AS LOCATION_NAME,
        CMST.COUNTER_MACHINE_TITLE,
        CONVERT(CHAR, MIN(MESS.RECEIPT_DATE), 103) AS FROM_DATE,
        CONVERT(CHAR, MAX(MESS.RECEIPT_DATE), 103) AS TO_DATE,
        COUNT(MESS.RECEIPT_MST_ID) AS RECEIPT_COUNT,
        MIN(MESS.SERIAL_NO) AS FIRST_RECEIPT_NO,
        MAX(MESS.SERIAL_NO) AS LAST_RECEIPT_NO,
        SUM(MESS.TOTAL_AMOUNT) AS TOTAL_AMOUNT
    FROM
        dbo.MEDICAL_RECEIPT_ENTRY_MST_T MESS
    INNER JOIN
        COM_LOCATION_MST_T LOC ON MESS.LOC_ID = LOC.LOCATION_ID
    INNER JOIN
        COM_COUNTER_MACHINE_MST_T CMST ON CMST.CTR_MACH_ID = MESS.CTR_MACH_ID
    WHERE
        1 = 1
        AND (@intCtrMachId = 0 OR MESS.CTR_MACH_ID = @intCtrMachId)
        AND MESS.FY_ID = @intFyId
        AND MESS.RECEIPT_DATE <= CONVERT(DATETIME, @strDate, 103)
        AND MESS.SERIAL_NO > ISNULL((SELECT MAX(MaxSerialNo) FROM DailyVoucherTransaction WHERE CTR_MACH_ID = @intCtrMachId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
        AND (@toSerialNo = 0 OR MESS.SERIAL_NO <= @toSerialNo)
    GROUP BY
        LOC.Location_Name, CMST.COUNTER_MACHINE_TITLE;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDailyVoucherToyTrain]...';


GO
CREATE PROCEDURE SP_GetDailyVoucherToyTrain
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT,
    @intFyId INT,
    @intModType SMALLINT,
    @toSerialNo INT
AS
BEGIN
    SELECT LOC.Location_Name AS LOCATION_NAME,
           CMST.COUNTER_MACHINE_TITLE,
           Convert(char, MIN(TOY.TT_DATE), 103) AS FROM_DATE,
           Convert(char, MAX(TOY.TT_DATE), 103) AS TO_DATE,
           COUNT(TOY.TOY_TRAIN_DET_ID) AS RECEIPT_COUNT,
           MIN(TOY.SERIAL_NO) AS FIRST_RECEIPT_NO,
           MAX(TOY.SERIAL_NO) AS LAST_RECEIPT_NO,
           SUM(TOY.AMOUNT) AS TOTAL_AMOUNT
    FROM dbo.TOY_TRAIN_DET_T TOY
    INNER JOIN COM_LOCATION_MST_T LOC ON TOY.LOC_ID = LOC.LOCATION_ID
    INNER JOIN COM_COUNTER_MACHINE_MST_T CMST ON CMST.CTR_MACH_ID = TOY.CTR_MACH_ID
    WHERE 1=1
    AND (@intCtrMachId = 0 OR TOY.CTR_MACH_ID = @intCtrMachId)
    AND TOY.FY_ID = @intFyId
    AND TOY.TT_DATE <= Convert(datetime, @strDate, 103)
    AND TOY.SERIAL_NO > ISNULL((SELECT Max(MaxSerialNo) FROM DailyVoucherTransaction WHERE CTR_MACH_ID = @intCtrMachId AND FY_ID = @intFyId AND MOD_ID = @intModType), 0)
    AND (@toSerialNo = 0 OR TOY.SERIAL_NO <= @toSerialNo)
    GROUP BY LOC.Location_Name, TOY.TT_DATE, CMST.COUNTER_MACHINE_TITLE;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDataForGrid]...';


GO
CREATE PROCEDURE SP_GetDataForGrid
    @CtrMachId INT = 0
AS
BEGIN
    BEGIN TRY
        SELECT 
            IMST.SERIAL_NO, 
            LOCKER_NAME,
            NAME,
            CONVERT(varchar, IN_DATE, 103) AS IN_DATE,
            CONVERT(varchar, IMST.OUT_DATE, 103) AS OUT_DATE,
            MOB_NO,
            PLACE
        FROM LOCK_LOCKER_CHECK_IN_MST_T IMST
        INNER JOIN LOCK_LOCKER_CHECK_IN_DET_T IDET ON IMST.CHECK_IN_MST_ID = IDET.CHECK_IN_MST_ID
        INNER JOIN LOCK_LOCKER_MST_T LMT ON LMT.LOCKER_ID = IDET.LOCKER_ID
        WHERE IMST.LOC_ID = @CtrMachId
            AND IMST.CHECK_IN_MST_ID NOT IN (SELECT CHECK_IN_MST_ID FROM LOCK_LOCKER_CHECK_OUT_MST_T)
        ORDER BY IMST.CHECK_IN_MST_ID;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDengiBhetVastuUserwise]...';


GO
CREATE PROCEDURE SP_GetDengiBhetVastuUserwise
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @strFromTime NVARCHAR(50),
    @strToTime NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    SELECT 
        ISNULL(th.HEADING, '') AS HEADING,
        ISNULL(th.SUBHEADING, '') AS SUBHEADING,
        cmt.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
        @strFromDate + ' to ' + @strToDate AS period,
        @strFromTime AS FromTime,
        @strToTime AS ToTime,
        'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
        ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
        LMT.Location_Name AS LOCATION_NAME,
        DMT.Department_Name AS DEPT_NAME,
        SUM(ISNULL(DEN.AMOUNT, 0)) AS TOTAL_AMOUNT,
        COUNT(ISNULL(DEN.DENGI_BhetVastu_ID, 0)) AS TOTAL_RECEIPT,
        (SELECT SUM(DEN_R.AMOUNT)
         FROM DEN_DENGI_BhetVastu_MST_T_R DEN_R
         WHERE DEN_R.user_id = UMT.User_Id
           AND DEN_R.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)) AS CHEQUE,
        (SELECT SUM(DEN_R.AMOUNT)
         FROM DEN_DENGI_BhetVastu_MST_T_R DEN_R
         WHERE DEN_R.user_id = UMT.User_Id
           AND DEN_R.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)) AS DEMAND_DRAFT,
        (SELECT SUM(DEN_R.AMOUNT)
         FROM DEN_DENGI_BhetVastu_MST_T_R DEN_R
         WHERE DEN_R.user_id = UMT.User_Id
           AND DEN_R.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)) AS CASH,
        (SELECT SUM(DEN_R.AMOUNT)
         FROM DEN_DENGI_BhetVastu_MST_T_R DEN_R
         WHERE DEN_R.user_id = UMT.User_Id
           AND DEN_R.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)) AS SWIPE,
        (SELECT SUM(DEN_R.AMOUNT)
         FROM DEN_DENGI_BhetVastu_MST_T_R DEN_R
         WHERE DEN_R.user_id = UMT.User_Id
           AND DEN_R.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)) AS Total_cash_cheque
    FROM 
        DEN_DENGI_BhetVastu_MST_T_R DEN
        INNER JOIN COM_COUNTER_MACHINE_MST_T CMT ON DEN.CTR_MACH_ID = CMT.CTR_MACH_ID
        INNER JOIN sec_user_mst_t UMT ON UMT.User_Id = DEN.User_Id
        INNER JOIN COM_DEPARTMENT_MST_T DMT ON DMT.Department_Id = CMT.DEPT_ID
        INNER JOIN COM_LOCATION_MST_T LMT ON CMT.LOC_ID = LMT.Location_Id
        INNER JOIN COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = DEN.FY_ID
        CROSS JOIN TBL_PRINT_HEADING th
    WHERE 
        (DEN.CTR_MACH_ID = @intCtrMachId OR @intCtrMachId = 0)
        AND (DEN.DR_DATE BETWEEN CONVERT(DATETIME, @strFromDate, 103) AND CONVERT(DATETIME, @strToDate, 103))
    GROUP BY 
        UMT.User_First_Name, UMT.User_Last_Name, UMT.User_Id, cmt.COUNTER_MACHINE_TITLE, 
        LMT.Location_Name, DMT.Department_Name, FY.DISPLAY_VALUE, th.HEADING, th.SUBHEADING;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDengiReceiptDetailData]...';


GO
CREATE PROCEDURE SP_GetDengiReceiptDetailData
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT
            ISNULL(tbl_print_heading.heading, '') AS HEADING,
            ISNULL(subheading, '') AS SUBHEADING,
            @strFromDate + ' to ' + @strToDate AS PERIOD,
            'Accounting Period: ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            LMT.Location_Name AS LOCATION_NAME,
            CMT.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            DMT.Department_Name AS DEPT_NAME,
            ISNULL(DEN.DENGI_RECEIPT_ID, 0) AS REC_NO,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(umt.User_Last_Name, '') AS UserName,
            ISNULL(DEN.NAME, '') AS NAME_VAL,
            ISNULL(DMST.TYPE, '') AS TYPE_VAL,
            CASE
                WHEN ISNULL(DEN.DENGI_MST_ID, 0) = 4 THEN AMOUNT
                ELSE '0'
            END AS DENGI,
            CASE
                WHEN ISNULL(DEN.DENGI_MST_ID, 0) = 6 THEN AMOUNT
                ELSE '0'
            END AS IMARAT_NIDHI,
            CASE
                WHEN ISNULL(DEN.DENGI_MST_ID, 0) = 3 THEN AMOUNT
                ELSE '0'
            END AS ABHISHEK,
            CASE
                WHEN ISNULL(DEN.DENGI_MST_ID, 0) = 9 THEN AMOUNT
                ELSE '0'
            END AS Annadan,
            CASE
                WHEN ISNULL(DEN.DENGI_MST_ID, 0) = 7 THEN AMOUNT
                ELSE '0'
            END AS Shikshan_Nidhi
        FROM
            DEN_DENGI_RECEIPT_MST_T DEN
            INNER JOIN DEN_DENGI_MASTER_T DMST ON DMST.DENGI_MST_ID = DEN.DENGI_MST_ID
            INNER JOIN COM_COUNTER_MACHINE_MST_T CMT ON DEN.CTR_MACH_ID = CMT.CTR_MACH_ID
            INNER JOIN sec_user_mst_t UMT ON UMT.User_Id = DEN.User_Id
            INNER JOIN COM_DEPARTMENT_MST_T DMT ON DMT.Department_Id = CMT.DEPT_ID
            INNER JOIN COM_LOCATION_MST_T LMT ON CMT.LOC_ID = LMT.Location_Id
            INNER JOIN COM_FINANCIAL_YEAR_MST_T FY ON DEN.FY_ID = FY.Financial_Year_Id
            CROSS JOIN tbl_print_heading
        WHERE
            (@intCtrMachId = 0 OR DEN.CTR_MACH_ID = @intCtrMachId)
            AND (@strFromDate = '' OR DEN.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103))
            AND (@strToDate = '' OR DEN.DR_DATE <= CONVERT(DATETIME, @strToDate, 103))
            AND DEN.DENGI_MST_ID IN (3, 4, 6, 7, 9);

        RETURN 0; -- Success
    END TRY

    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDengiTypes]...';


GO
CREATE PROCEDURE SP_GetDengiTypes
AS
BEGIN
    SELECT DENGI_MST_ID, TYPE, ISNULL(TYPE_M, '') AS TYPE_M
    FROM DEN_DENGI_MASTER_T
    WHERE DENGI_STATUS_ID = 3;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDengiUserwiseData]...';


GO
CREATE PROCEDURE SP_GetDengiUserwiseData
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @strFromTime NVARCHAR(50),
    @strToTime NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT
            (SELECT ISNULL(HEADING, '') FROM TBL_PRINT_HEADING) AS HEADING,
            (SELECT ISNULL(SUBHEADING, '') FROM TBL_PRINT_HEADING) AS SUBHEADING,
            CMT.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            @strFromDate + ' to ' + @strToDate AS period,
            @strFromTime AS FromTime,
            @strToTime AS ToTime,
            'Accounting Period: ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
            LMT.Location_Name AS LOCATION_NAME,
            DMT.Department_Name AS DEPT_NAME,
            SUM(ISNULL(DEN.AMOUNT, 0)) AS TOTAL_AMOUNT,
            COUNT(ISNULL(DEN.DENGI_RECEIPT_ID, 0)) AS TOTAL_RECEIPT,
            (SELECT SUM(DEN_DENGI_RECEIPT_MST_T.AMOUNT) FROM DEN_DENGI_RECEIPT_MST_T
                WHERE payment_type_id = 7 AND DEN_DENGI_RECEIPT_MST_T.user_id = UMT.User_Id
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE <= CONVERT(DATETIME, @strToDate, 103)) AS CHEQUE,
            (SELECT SUM(DEN_DENGI_RECEIPT_MST_T.AMOUNT) FROM DEN_DENGI_RECEIPT_MST_T
                WHERE payment_type_id = 9 AND DEN_DENGI_RECEIPT_MST_T.user_id = UMT.User_Id
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE <= CONVERT(DATETIME, @strToDate, 103)) AS DEMAND_DRAFT,
            (SELECT SUM(DEN_DENGI_RECEIPT_MST_T.AMOUNT) FROM DEN_DENGI_RECEIPT_MST_T
                WHERE payment_type_id = 8 AND DEN_DENGI_RECEIPT_MST_T.user_id = UMT.User_Id
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE <= CONVERT(DATETIME, @strToDate, 103)) AS CASH,
            (SELECT SUM(DEN_DENGI_RECEIPT_MST_T.AMOUNT) FROM DEN_DENGI_RECEIPT_MST_T
                WHERE payment_type_id = 202 AND DEN_DENGI_RECEIPT_MST_T.user_id = UMT.User_Id
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE <= CONVERT(DATETIME, @strToDate, 103)) AS SWIPE,
            (SELECT SUM(DEN_DENGI_RECEIPT_MST_T.AMOUNT) FROM DEN_DENGI_RECEIPT_MST_T
                WHERE payment_type_id IN (7, 8, 9, 202)
                AND DEN_DENGI_RECEIPT_MST_T.user_id = UMT.User_Id
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103)
                AND DEN_DENGI_RECEIPT_MST_T.DR_DATE <= CONVERT(DATETIME, @strToDate, 103)) AS Total_cash_cheque
        FROM
            DEN_DENGI_RECEIPT_MST_T DEN
            INNER JOIN COM_COUNTER_MACHINE_MST_T CMT ON DEN.CTR_MACH_ID = CMT.CTR_MACH_ID
            INNER JOIN sec_user_mst_t UMT ON UMT.User_Id = DEN.User_Id
            INNER JOIN COM_DEPARTMENT_MST_T DMT ON DMT.Department_Id = CMT.DEPT_ID
            INNER JOIN COM_LOCATION_MST_T LMT ON CMT.LOC_ID = LMT.Location_Id
            INNER JOIN COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = DEN.FY_ID
        WHERE
            (@intCtrMachId = 0 OR DEN.CTR_MACH_ID = @intCtrMachId)
            AND (@strFromDate = '' OR DEN.DR_DATE >= CONVERT(DATETIME, @strFromDate, 103))
            AND (@strToDate = '' OR DEN.DR_DATE <= CONVERT(DATETIME, @strToDate, 103))
            AND (@strFromTime = '' OR LTRIM(RIGHT(CONVERT(VARCHAR(20), DEN.ENTERED_ON, 100), 7)) >= @strFromTime)
            AND (@strToTime = '' OR LTRIM(RIGHT(CONVERT(VARCHAR(20), DEN.ENTERED_ON, 100), 7)) <= @strToTime)
        GROUP BY
            UMT.User_First_Name, UMT.User_Last_Name, UMT.user_id, CMT.COUNTER_MACHINE_TITLE,
            LMT.Location_Name, DMT.Department_Name, FY.DISPLAY_VALUE;

        RETURN 0; -- Success
    END TRY

    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDengiVoucherDetails]...';


GO
CREATE PROCEDURE SP_GetDengiVoucherDetails
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT
            ISNULL(th.heading, '') AS HEADING,
            ISNULL(th.subheading, '') AS SUBHEADING,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            'Accounting Period : ' + fy.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            loc.Location_Name AS LOCATION_NAME,
            cmst.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            dept.Department_Name AS DEPT_NAME,
            dmt.SERIAL_NO AS ReceiptNo,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), dmt.ENTERED_ON, 100), 7)) AS RECEIPT_TIME,
            dmt.name AS Name,
            ISNULL(address, ' ') AS Place,
            cdt.Token_Detail_Name AS PaymentType,
            dmt.AMOUNT
        FROM
            DEN_DENGI_RECEIPT_MST_T dmt
        INNER JOIN
            com_token_det_t cdt ON dmt.PAYMENT_TYPE_ID = cdt.Token_Detail_Id
        INNER JOIN
            COM_FINANCIAL_YEAR_MST_T fy ON fy.Financial_Year_Id = dmt.FY_ID
        INNER JOIN
            COM_LOCATION_MST_T loc ON dmt.LOC_ID = loc.LOCATION_ID
        INNER JOIN
            COM_COUNTER_MACHINE_MST_T cmst ON dmt.CTR_MACH_ID = cmst.CTR_MACH_ID
        INNER JOIN
            COM_DEPARTMENT_MST_T dept ON cmst.DEPT_ID = dept.DEPARTMENT_ID
        CROSS JOIN
            tbl_print_heading th
        WHERE
            (@CtrMachId = 0 OR dmt.CTR_MACH_ID = @CtrMachId)
            AND (@FromDate = '' OR dmt.DR_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR dmt.DR_DATE <= CONVERT(DATETIME, @ToDate, 103));

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDistrictsByStateId]...';


GO
CREATE PROCEDURE SP_GetDistrictsByStateId
    @StateId INT
AS
BEGIN
    SELECT DistrictId, DistrictName
    FROM Districts
    WHERE StateId = @StateId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDmgedLkrsForGrid]...';


GO
CREATE PROCEDURE [dbo].[SP_GetDmgedLkrsForGrid]
    @CtrMachId INT
AS
BEGIN
    BEGIN TRY
        SELECT 
            IDET.LOCKER_NAME,
            CONVERT(VARCHAR, IMST.DATE, 103) AS DATE,
            IMST.REASON
        FROM 
            LOCK_DAMAGED_LOCKERS IMST 
        INNER JOIN 
            LOCK_LOCKER_MST_T IDET ON IMST.LOCKER_ID = IDET.LOCKER_ID
        WHERE 
            CTR_MACH_ID = @CtrMachId
            AND AVAILABLE_STATUS = 191;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDocumentTypes]...';


GO
CREATE PROCEDURE SP_GetDocumentTypes
AS
BEGIN
    SELECT 0 AS DocumentID, 'Select' AS DocumentName
    UNION ALL
    SELECT Lookup_Value_Order AS DocumentID, Lookup_Value_Name AS DocumentName
    FROM COM_LOOKUP_VALUES_MST_V
    WHERE Lookup_Name = 'Document Type';
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDrLockerChangeMst]...';


GO
CREATE PROCEDURE SP_GetDrLockerChangeMst
    @LockerCheckInMstId BIGINT = 0,
    @Date VARCHAR(20) = NULL,
    @SerialNo BIGINT = 0,
    @CtrMachId BIGINT = 0,
    @ComId BIGINT = 0,
    @LocId BIGINT = 0,
    @DeptId BIGINT = 0,
    @FYId BIGINT = 0
AS
BEGIN
    BEGIN TRY
        SELECT
            MST.CHECK_IN_MST_ID AS CheckInMstId,
            MST.COM_ID AS ComId,
            MST.LOC_ID AS LocId,
            MST.DEPT_ID AS DeptId,
            MST.FY_ID AS FyId,
            MST.IN_DATE AS InDate,
            CONVERT(datetime, MST.IN_TIME, 108) AS InTime,
            MST.SERIAL_NO AS SerialNo,
            MST.APP_NO AS AppNo,
            MST.NAME AS Name,
            MST.PLACE AS Place,
            ISNULL(MST.MOB_NO, '') AS MOB_NO,
            MST.DAYS AS Days,
            MST.NO_OF_LOCKERS AS NoOfLockers,
            CONVERT(varchar, MST.OUT_DATE, 103) AS OutDate,
            CONVERT(datetime, MST.OUT_TIME, 108) AS OutTime,
            MST.ADVANCE AS Advance,
            MST.RENT AS Rent,
            MST.SERVER_NAME AS ServerName,
            MST.Entered_By AS EnteredBy,
            MST.Entered_On AS EnteredOn,
            MST.Modified_By AS ModifiedBy,
            MST.Modified_On AS ModifiedOn,
            MST.Machine_Name AS MachineName,
            MST.USER_ID AS UserId,
            MST.Record_Modified_Count AS RecordModifiedCount,
            ISNULL((SELECT COUNT(*)
                     FROM LOCK_LOCKER_CHECK_IN_DET_T CINDET
                     WHERE CINDET.CHECK_IN_MST_ID = MST.CHECK_IN_MST_ID
                       AND LOCKER_ID NOT IN (SELECT LOCKER_ID
                                              FROM LOCK_LOCKER_CHECK_OUT_DET_T CODET
                                              INNER JOIN LOCK_LOCKER_CHECK_OUT_MST_T COMST
                                              ON CODET.CHECK_OUT_MST_ID = COMST.CHECK_OUT_MST_ID
                                              WHERE COMST.CHECK_IN_MST_ID = MST.CHECK_IN_MST_ID)), 0) AS PendLockerCount
        FROM LOCK_LOCKER_CHECK_IN_MST_T MST
        WHERE 1 = 1
        AND (@LockerCheckInMstId = 0 OR MST.CHECK_IN_MST_ID = @LockerCheckInMstId)
        AND (@ComId = 0 OR MST.COM_ID = @ComId)
        AND (@LocId = 0 OR MST.LOC_ID = @LocId)
        AND (@DeptId = 0 OR MST.DEPT_ID = @DeptId)
        AND (@FYId = 0 OR MST.FY_ID = @FYId)
        AND (@Date = '' OR MST.IN_DATE = @Date)
        AND (@SerialNo = 0 OR MST.SERIAL_NO = @SerialNo)
        AND (@CtrMachId = 0 OR MST.CTR_MACH_ID = @CtrMachId)
        ORDER BY MST.IN_DATE DESC, MST.IN_TIME DESC, MST.SERIAL_NO DESC;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDrLockerCheckInDet]...';


GO
CREATE PROCEDURE SP_GetDrLockerCheckInDet
    @LockerCheckInMstId BIGINT = 0,
    @CtrMachId BIGINT = 0
AS
BEGIN
    BEGIN TRY
        SELECT
            L.LOCKER_ID AS LockerId,
            L.LOCKER_NAME AS LockerName,
            ISNULL(L.Record_Modified_Count, 0) AS RecordModifiedCount
        FROM LOCK_LOCKER_CHECK_IN_DET_T DET
        INNER JOIN LOCK_LOCKER_MST_T L ON DET.LOCKER_ID = L.LOCKER_ID
        WHERE 1 = 1
            AND (@LockerCheckInMstId = 0 OR DET.CHECK_IN_MST_ID = @LockerCheckInMstId)
            AND L.LOCKER_ID NOT IN (
                SELECT LOCKER_ID
                FROM LOCK_LOCKER_CHECK_OUT_DET_T CODET
                INNER JOIN LOCK_LOCKER_CHECK_OUT_MST_T COMST ON CODET.CHECK_OUT_MST_ID = COMST.CHECK_OUT_MST_ID
                WHERE COMST.CHECK_IN_MST_ID = @LockerCheckInMstId
            )
            AND (@CtrMachId = 0 OR L.CTR_MACH_ID = @CtrMachId)
        GROUP BY L.LOCKER_ID, L.LOCKER_NAME, L.Record_Modified_Count
        ORDER BY L.LOCKER_NAME;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDrLockerDetails]...';


GO
CREATE PROCEDURE [dbo].[SP_GetDrLockerDetails]
    @CtrMachId INT = 0,
    @ActiveInactiveStatus INT = 0,
    @AvailableStatus INT = 0,
    @Str NVARCHAR(100) = ''
AS
BEGIN
    BEGIN TRY
        DECLARE @sql NVARCHAR(MAX);

        SET @sql = 'SELECT 
                        Locker_Id AS LockerId,
                        Locker_Name AS LockerName,
                        Descr AS Descr,
                        Status AS Status,
                        AVAILABLE_STATUS AS AvailableStatus,
                        ISNULL(RECORD_MODIFIED_COUNT, 0) AS RecordModifiedCount
                    FROM 
                        LOCK_LOCKER_MST_T MST
                    WHERE 1=1 ';

        IF @CtrMachId != 0
            SET @sql = @sql + ' AND LOC_ID = ' + CAST(@CtrMachId AS NVARCHAR) + '';

        IF @Str != ''
            SET @sql = @sql + ' AND Locker_Name LIKE @Stra + ''%'' ';

        IF @AvailableStatus != 0
            SET @sql = @sql + ' AND AVAILABLE_STATUS = ' + CAST(@AvailableStatus AS NVARCHAR) + '';

        SET @sql = @sql + ' ORDER BY CAST(LOCKER_name AS INT)';

        EXEC sp_executesql @sql, N'@Stra NVARCHAR(100)', @Stra = @Str;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDrLockerTariff]...';


GO
CREATE PROCEDURE SP_GetDrLockerTariff
AS
BEGIN
    BEGIN TRY
        SELECT 
            ISNULL(Advance, 0) AS Advance,
            ISNULL(Rent_Per_Day, 0) AS RentPerDay,
            Expiry_Days AS ExpiryDays,
            Message AS Message
        FROM 
            LOCK_LOCKER_SETTING_T MST;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDrSublocation]...';


GO
CREATE PROCEDURE SP_GetDrSublocation
    @ModType INT,
    @LocationID BIGINT = NULL
AS
BEGIN
    SELECT
        Department_Id AS Department_Id,
        Department_Name AS Department,
        Department_Short_Name AS DepartmentShortName,
        Department_Id AS DepartmentId
    FROM
        COM_DEPARTMENT_MST_T
    WHERE
        MOD_TYPE = @ModType
        AND (@LocationID IS NULL OR Location_Id = @LocationID)
    ORDER BY
        Department_Name;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDsLockerDetails]...';


GO
CREATE PROCEDURE SP_GetDsLockerDetails
    @CtrMachId INT = 0,
    @ActiveInactiveStatus SMALLINT = 0,
    @AvailableStatus SMALLINT = 0
AS
BEGIN
    BEGIN TRY
        SELECT
            Locker_Id AS LockerId,
            Locker_Name AS LockerName
        FROM LOCK_LOCKER_MST_T
        WHERE 1 = 1
            AND (@CtrMachId = 0 OR LOC_ID = @CtrMachId)
            AND (@ActiveInactiveStatus = 0 OR STATUS = @ActiveInactiveStatus)
            AND (@AvailableStatus = 0 OR AVAILABLE_STATUS = @AvailableStatus);
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetDsPaymentType2]...';


GO
CREATE PROCEDURE SP_GetDsPaymentType2
    @TypetTable AS dbo.IntArrayType READONLY
AS
BEGIN
    SELECT
        ISNULL(Token_Detail_Id, 0) AS Token_Detail_Id,
        ISNULL(Token_Detail_Name, '') AS Token_Detail_Name
    FROM
        com_token_det_t
    WHERE
        Token_Detail_Id IN (SELECT value FROM @TypetTable);
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetEntryGateDailyReceiptData]...';


GO
CREATE PROCEDURE SP_GetEntryGateDailyReceiptData
    @strFDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT
            NULL AS Heading,
            NULL AS subheading,
            ISNULL(USER_NAME, '') AS USERNAME,
            FIRST_RECEIPT_NO,
            LAST_RECEIPT_NO,
            TOTAL_AMOUNT,
            COUNTER_MACHINE_TITLE,
            CASE WHEN ISNULL(Location_Name, '') <> '' THEN 'Location :' + Location_Name ELSE '' END AS Location_Name,
            CASE WHEN ISNULL(Department_Name, '') <> '' THEN 'Sublocation :' + Department_Name ELSE '' END AS Department_Name,
            @strFDate AS prntdate,
            'Accounting Period : ' + DISPLAY_VALUE AS AccountingPeriod
        FROM
            GAM_ENTRY_GATE_DAILY_RECEIPT_LIST
        WHERE
            (@intCtrMachId = 0 OR CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR EG_DATE = CONVERT(DATETIME, @strFDate, 103));

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetEntryGateReceiptDetail]...';


GO
CREATE PROCEDURE SP_GetEntryGateReceiptDetail
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT
            ISNULL(th.heading, '') AS HEADING,
            ISNULL(th.subheading, '') AS SUBHEADING,
            loc.Location_Name AS LOCATION_NAME,
            dept.Department_Name AS DEPARTMENT_NAME,
            cmst.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            egdt.Entered_By AS USER_NAME,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            'Accounting Period : ' + fy.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            egdt.SERIAL_NO AS RCPT_NO,
            CONVERT(DATETIME, egdt.EG_DATE, 103) AS EG_DATE,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), egdt.ENTERED_ON, 100), 7)) AS RECEIPT_TIME,
            egdt.NAME AS BHAKT_NAME,
            egdt.ADULT_NO,
            egdt.CHILD_NO,
            egdt.TRIP_NO,
            egdt.AMOUNT
        FROM
            GAM_ENTRY_GATE_DET_T AS egdt
        INNER JOIN
            COM_FINANCIAL_YEAR_MST_T AS fy ON egdt.FY_ID = fy.Financial_Year_Id
        INNER JOIN
            COM_COUNTER_MACHINE_MST_T AS cmst ON egdt.CTR_MACH_ID = cmst.CTR_MACH_ID
        INNER JOIN
            COM_DEPARTMENT_MST_T AS dept ON cmst.DEPT_ID = dept.DEPARTMENT_ID
        INNER JOIN
            COM_LOCATION_MST_T AS loc ON dept.LOCATION_ID = loc.LOCATION_ID
        CROSS JOIN
            tbl_print_heading AS th
        WHERE
            (@CtrMachId = 0 OR egdt.CTR_MACH_ID = @CtrMachId)
            AND (@FromDate = '' OR egdt.EG_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR egdt.EG_DATE <= CONVERT(DATETIME, @ToDate, 103))
        ORDER BY
            egdt.EG_DATE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetEntryGateUserWiseData]...';


GO
CREATE PROCEDURE SP_GetEntryGateUserWiseData
    @strFDate NVARCHAR(50),
    @strTDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT DISTINCT
            NULL AS Heading,
            NULL AS subheading,
            CMT.COUNTER_MACHINE_TITLE,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
            SUM(ISNULL(TDT.AMOUNT, 0)) AS TOTAL_AMOUNT,
            SUM(TDT.ADULT_NO) AS ADULT_NO,
            SUM(TDT.ADULT_RATE) AS ADULT_RATE,
            SUM(TDT.CHILD_NO) AS CHILD_NO,
            SUM(TDT.CHILD_RATE) AS CHILD_RATE,
            SUM(TDT.TRIP_NO) AS TRIP_NO,
            SUM(TDT.TRIP_RATE) AS TRIP_RATE,
            COUNT(ISNULL(TDT.ENTRY_GATE_DET_ID, 0)) AS TOTAL_RECEIPT,
            @strFDate + ' to ' + @strTDate AS period,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS AccountingPeriod
        FROM
            GAM_ENTRY_GATE_DET_T TDT
        JOIN
            COM_COUNTER_MACHINE_MST_T CMT ON TDT.CTR_MACH_ID = CMT.CTR_MACH_ID
        JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = TDT.FY_ID
        JOIN
            sec_user_mst_t UMT ON UMT.User_Id = TDT.User_Id
        WHERE
            (@intCtrMachId = 0 OR TDT.CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR TDT.EG_DATE >= CONVERT(DATETIME, @strFDate, 103))
            AND (@strTDate = '' OR TDT.EG_DATE <= CONVERT(DATETIME, @strTDate, 103))
        GROUP BY
            CMT.COUNTER_MACHINE_TITLE,
            FY.DISPLAY_VALUE,
            UMT.User_Id,
            UMT.User_First_Name,
            UMT.User_Last_Name;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetExpiryDays]...';


GO
CREATE PROCEDURE SP_GetExpiryDays
AS
BEGIN
    SET NOCOUNT ON;

    SELECT ISNULL(EXPIRY_DAYS, 0) AS EXPIRY_DAYS
    FROM LOCK_LOCKER_SETTING_T;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetFinancialYearDetails]...';


GO
CREATE PROCEDURE SP_GetFinancialYearDetails
AS
BEGIN
    SELECT FINANCIAL_YEAR_ID, Start_Date, End_Date
    FROM COM_FINYR_TO_COMP_MST_V
    WHERE COMPANY_ID = 9
    AND CURRENT_FINANCIAL_YEAR_STATUS = 'Y';
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetGameDailyReceiptData]...';


GO
CREATE PROCEDURE SP_GetGameDailyReceiptData
    @strFDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT
            NULL AS Heading,
            NULL AS subheading,
            FIRST_RECEIPT_NO,
            LAST_RECEIPT_NO,
            TOTAL_AMOUNT,
            COUNTER_MACHINE_TITLE,
            ISNULL(USER_NAME, '') AS USERNAME,
            CASE
                WHEN ISNULL(Location_Name, '') = '' THEN ''
                ELSE 'Location :' + Location_Name
            END AS Location_Name,
            CASE
                WHEN ISNULL(Department_Name, '') = '' THEN ''
                ELSE 'Sublocation :' + Department_Name
            END AS Department_Name,
            @strFDate AS prntdate,
            'Accounting Period : ' + DISPLAY_VALUE AS AccountingPeriod
        FROM
            GAM_GAME_DAILY_RECEIPT_LIST
        WHERE
            (@intCtrMachId = 0 OR CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR GM_DATE = CONVERT(DATETIME, @strFDate, 103));

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetGameUserWiseData]...';


GO
CREATE PROCEDURE SP_GetGameUserWiseData
    @strFDate NVARCHAR(50),
    @strTDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT DISTINCT
            NULL AS Heading,
            NULL AS subheading,
            CMT.COUNTER_MACHINE_TITLE,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
            SUM(ISNULL(TDT.AMOUNT, 0)) AS TOTAL_AMOUNT,
            COUNT(ISNULL(TDT.GAME_DET_ID, 0)) AS TOTAL_RECEIPT,
            @strFDate + ' to ' + @strTDate AS period,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS AccountingPeriod,
            SUM((ISNULL(TDT.ADULT_NO, 0) + ISNULL(TDT.CHILD_NO, 0) + ISNULL(TDT.TRIP_NO, 0))) AS USER_COUNT
        FROM
            GAM_GAME_DET_T TDT
        JOIN
            COM_COUNTER_MACHINE_MST_T CMT ON TDT.CTR_MACH_ID = CMT.CTR_MACH_ID
        JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = TDT.FY_ID
        JOIN
            sec_user_mst_t UMT ON UMT.User_Id = TDT.USER_ID
        WHERE
            (@intCtrMachId = 0 OR TDT.CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR TDT.GM_DATE >= CONVERT(DATETIME, @strFDate, 103))
            AND (@strTDate = '' OR TDT.GM_DATE <= CONVERT(DATETIME, @strTDate, 103))
        GROUP BY
            CMT.COUNTER_MACHINE_TITLE, FY.DISPLAY_VALUE, TDT.USER_ID, UMT.User_Last_Name, UMT.User_First_Name;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetGotra]...';


GO
CREATE PROCEDURE SP_GetGotra
AS
BEGIN
    SELECT ISNULL(gotra_id, 0) AS gotra_id,
           ISNULL(gotra_name, '') AS gotra_name
    FROM tbl_gotra_master;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerAdvanceVouchers]...';


GO
CREATE PROCEDURE SP_GetLockerAdvanceVouchers
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @FromTime NVARCHAR(50),
    @ToTime NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            ISNULL(tbl_print_heading.heading, '') AS HEADING,
            ISNULL(subheading, '') AS SUBHEADING,
            LOC.Location_Name AS LOCATION_NAME,
            DEPT.Department_Name AS DEPARTMENT_NAME,
            DEPT.Department_Name AS BhaktNiwas,
            STUFF(
                (
                    SELECT ',' + LOCKER_NAME 
                    FROM LockNames_Vw t2 
                    WHERE t2.CHECK_IN_MST_ID = EGDT.CHECK_IN_MST_ID 
                    FOR XML PATH(''), TYPE
                ).value('.', 'varchar(max)'), 1, 1, ''
            ) AS RoomNo,
            @FromTime AS FromTime,
            @ToTime AS ToTime,
            CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            EGDT.Entered_By AS USER_NAME,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            EGDT.SERIAL_NO AS IN_RCPT_NO,
            CONVERT(DATETIME, EGDT.IN_DATE, 103) AS IN_DATE,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME1,
            EGDT.NAME AS BHAKT_NAME1,
            EGDT.RENT AS RENT1,
            EGDT.ADVANCE,
            (
                SELECT COUNT(*) 
                FROM LOCK_LOCKER_CHECK_IN_DET_T 
                WHERE CHECK_IN_MST_ID = EGDT.CHECK_IN_MST_ID
            ) AS NOROOM
        FROM 
            LOCK_LOCKER_CHECK_IN_MST_T AS EGDT 
        INNER JOIN 
            COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id 
        INNER JOIN 
            COM_COUNTER_MACHINE_MST_T AS CMST ON EGDT.CTR_MACH_ID = CMST.CTR_MACH_ID 
        INNER JOIN 
            COM_DEPARTMENT_MST_T AS DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID 
        INNER JOIN 
            COM_LOCATION_MST_T AS LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID 
        LEFT JOIN 
            tbl_print_heading ON 1 = 1 -- Add appropriate join condition
        WHERE 
            EGDT.CHECKOUTSTATUS = 0 
            AND (@CtrMachId = 0 OR EGDT.CTR_MACH_ID = @CtrMachId)
            AND (
                @FromDate = '' OR 
                (EGDT.IN_DATE >= CONVERT(DATETIME, @FromDate, 103) + CONVERT(DATETIME, @FromTime, 108))
            )
            AND (
                @ToDate = '' OR 
                (EGDT.IN_DATE <= CONVERT(DATETIME, @ToDate, 103) + CONVERT(DATETIME, @ToTime, 108))
            )
        ORDER BY 
            EGDT.IN_DATE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckInCheckOut]...';


GO
CREATE PROCEDURE SP_GetLockerCheckInCheckOut
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- First query
        SELECT 
            ISNULL(tbl_print_heading.heading, '') AS HEADING,
            ISNULL(subheading, '') AS SUBHEADING,
            LOC.Location_Name AS LOCATION_NAME,
            DEPT.Department_Name AS DEPARTMENT_NAME,
            CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            EGDT.Entered_By AS USER_NAME,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            EGDT.SERIAL_NO AS IN_RCPT_NO,
            CONVERT(DATETIME, EGDT.IN_DATE, 103) AS IN_DATE,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME1,
            EGDT.NAME AS BHAKT_NAME1,
            EGDT.RENT AS RENT1,
            EGDT.ADVANCE
        FROM 
            LOCK_LOCKER_CHECK_IN_MST_T AS EGDT
        INNER JOIN 
            COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN 
            COM_COUNTER_MACHINE_MST_T CMST ON EGDT.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN 
            COM_DEPARTMENT_MST_T DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN 
            COM_LOCATION_MST_T LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        CROSS JOIN 
            tbl_print_heading
        WHERE 
            (@CtrMachId = 0 OR EGDT.LOC_ID = @CtrMachId)
            AND (@FromDate = '' OR EGDT.IN_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR EGDT.IN_DATE <= CONVERT(DATETIME, @ToDate, 103))
        ORDER BY 
            EGDT.IN_DATE;

        -- Second query
        SELECT 
            EGDT.SERIAL_NO AS RCPT_NO,
            CONVERT(DATETIME, EGDT.OUT_DATE, 103) AS OUT_DATE,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME,
            LCIM.NAME AS BHAKT_NAME,
            EGDT.RENT AS RENT,
            EGDT.REFUND
        FROM 
            LOCK_LOCKER_CHECK_OUT_MST_T AS EGDT
        INNER JOIN 
            COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN 
            LOCK_LOCKER_CHECK_IN_MST_T LCIM ON EGDT.CHECK_IN_MST_ID = LCIM.CHECK_IN_MST_ID
        WHERE 
            (@CtrMachId = 0 OR EGDT.CTR_MACH_ID = @CtrMachId)
            AND (@FromDate = '' OR EGDT.OUT_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR EGDT.OUT_DATE <= CONVERT(DATETIME, @ToDate, 103))
        ORDER BY 
            EGDT.OUT_DATE;

        -- Third query
        SELECT 
            (
                (SELECT SUM(EGDT.ADVANCE + EGDT.RENT) AS TOT FROM LOCK_LOCKER_CHECK_IN_MST_T AS EGDT
                WHERE 
                    (@CtrMachId = 0 OR EGDT.CTR_MACH_ID = @CtrMachId)
                    AND (@FromDate = '' OR EGDT.IN_DATE >= CONVERT(DATETIME, @FromDate, 103))
                    AND (@ToDate = '' OR EGDT.IN_DATE <= CONVERT(DATETIME, @ToDate, 103))
                ) 
                - 
                (SELECT SUM(REFUND) AS TOT FROM LOCK_LOCKER_CHECK_OUT_MST_T AS EGDT
                WHERE 
                    (@CtrMachId = 0 OR EGDT.CTR_MACH_ID = @CtrMachId)
                    AND (@FromDate = '' OR EGDT.OUT_DATE >= CONVERT(DATETIME, @FromDate, 103))
                    AND (@ToDate = '' OR EGDT.OUT_DATE <= CONVERT(DATETIME, @ToDate, 103))
                )
            ) AS FinalAmt;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckInDet]...';


GO
CREATE PROCEDURE [dbo].[SP_GetLockerCheckInDet]
    @lngLockerCheckInMstId BIGINT = 0,
    @blnAll BIT = 0,
    @lngCtrMachId BIGINT = 0
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        ISNULL(DET.CHECK_IN_DET_ID, 0) AS LockerCheckInDetId,
        ISNULL(DET.CHECK_IN_MST_ID, 0) AS LockerCheckInMstId,
        L.LOCKER_ID AS LockerId,
        L.LOCKER_NAME AS LockerName,
        ISNULL(L.Record_Modified_Count, 0) AS RecordModifiedCount
    FROM 
        LOCK_LOCKER_CHECK_IN_DET_T DET
    INNER JOIN 
        LOCK_LOCKER_MST_T L ON DET.LOCKER_ID = L.LOCKER_ID
    WHERE 
        (@lngLockerCheckInMstId = 0 OR DET.CHECK_IN_MST_ID = @lngLockerCheckInMstId) AND
        (@blnAll = 1 OR (DET.CHECK_IN_MST_ID IS NULL AND L.AVAILABLE_STATUS = 177))
    ORDER BY 
        DET.CHECK_IN_MST_ID DESC, 
        L.LOCKER_NAME;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckInDetForDetail]...';


GO
CREATE PROCEDURE SP_GetLockerCheckInDetForDetail
    @LockerCheckInMstId BIGINT = NULL,
    @CtrMachId BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT
            L.LOCKER_ID AS LockerId,
            L.LOCKER_NAME AS LockerName,
            ISNULL(L.Record_Modified_Count, 0) AS RecordModifiedCount
        FROM
            LOCK_LOCKER_CHECK_IN_DET_T DET
        INNER JOIN
            LOCK_LOCKER_MST_T L ON DET.LOCKER_ID = L.LOCKER_ID
        WHERE
            (@LockerCheckInMstId IS NULL OR DET.CHECK_IN_MST_ID = @LockerCheckInMstId) AND
            L.LOCKER_ID NOT IN (
                SELECT
                    LOCKER_ID
                FROM
                    LOCK_LOCKER_CHECK_OUT_DET_T CODET
                INNER JOIN
                    LOCK_LOCKER_CHECK_OUT_MST_T COMST ON CODET.CHECK_OUT_MST_ID = COMST.CHECK_OUT_MST_ID
                WHERE
                    COMST.CHECK_IN_MST_ID = @LockerCheckInMstId
            ) AND
            (@CtrMachId IS NULL OR L.CTR_MACH_ID = @CtrMachId)
        GROUP BY
            L.LOCKER_ID, L.LOCKER_NAME, L.Record_Modified_Count
        ORDER BY
            L.LOCKER_NAME;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckInMst]...';


GO
CREATE PROCEDURE SP_GetLockerCheckInMst
    @lngLockerCheckInMstId BIGINT = 0,
    @strDate NVARCHAR(20) = '',
    @lngSerialNo BIGINT = 0,
    @lngComId BIGINT = 0,
    @lngLocId BIGINT = 0,
    @lngDeptId BIGINT = 0
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        MST.CHECK_IN_MST_ID AS CheckInMstId,
        MST.COM_ID AS ComId,
        MST.LOC_ID AS LocId,
        MST.DEPT_ID AS DeptId,
        MST.FY_ID AS FyId,
        MST.IN_DATE AS InDate,
        CONVERT(DATETIME, MST.IN_TIME, 108) AS InTime,
        MST.SERIAL_NO AS SerialNo,
        MST.APP_NO AS AppNo,
        MST.NAME AS Name,
        MST.PLACE AS Place,
        CONVERT(DATETIME, '12/31/9998 00:00:00', 101) AS MaxDate,
        DATEDIFF(MINUTE, MST.in_date + MST.in_time, GETDATE()) AS CALC_HOUR,
        MST.MOB_NO AS MOB_NO,
        MST.DAYS AS Days,
        MST.NO_OF_LOCKERS AS NoOfLockers,
        MST.OUT_DATE AS OutDate,
        CONVERT(DATETIME, MST.OUT_TIME, 108) AS OutTime,
        MST.ADVANCE AS Advance,
        MST.RENT AS Rent,
        MST.SERVER_NAME AS ServerName,
        MST.Entered_By AS EnteredBy,
        MST.Entered_On AS EnteredOn,
        MST.Modified_By AS ModifiedBy,
        MST.Modified_On AS ModifiedOn,
        MST.Machine_Name AS MachineName,
        MST.USER_ID AS UserId,
        MST.Record_Modified_Count AS RecordModifiedCount,
        ISNULL((SELECT COUNT(*) 
                FROM LOCK_LOCKER_CHECK_IN_DET_T CINDET 
                WHERE CINDET.CHECK_IN_MST_ID = MST.CHECK_IN_MST_ID 
                    AND LOCKER_ID NOT IN 
                    (SELECT LOCKER_ID 
                     FROM LOCK_LOCKER_CHECK_OUT_DET_T CODET 
                     INNER JOIN LOCK_LOCKER_CHECK_OUT_MST_T COMST 
                     ON CODET.CHECK_OUT_MST_ID = COMST.CHECK_OUT_MST_ID 
                     WHERE COMST.CHECK_IN_MST_ID = MST.CHECK_IN_MST_ID)), 0) AS PendLockerCount
    FROM 
        LOCK_LOCKER_CHECK_IN_MST_T MST
    WHERE 
        (@lngLockerCheckInMstId = 0 OR MST.CHECK_IN_MST_ID = @lngLockerCheckInMstId) AND
        (@lngComId = 0 OR MST.COM_ID = @lngComId) AND
        (@lngLocId = 0 OR MST.LOC_ID = @lngLocId) AND
        (@lngDeptId = 0 OR MST.DEPT_ID = @lngDeptId) AND
        (@strDate = '' OR MST.IN_DATE = @strDate) AND
        (@lngSerialNo = 0 OR MST.Serial_No = @lngSerialNo)
    ORDER BY 
        MST.IN_DATE DESC, 
        MST.IN_TIME DESC, 
        MST.SERIAL_NO DESC;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckInMstForOut]...';


GO
CREATE PROCEDURE [dbo].[SP_GetLockerCheckInMstForOut]
    @LockerCheckInMstId BIGINT = NULL,
    @Date DATE = NULL,
    @SerialNo BIGINT = NULL,
    @ComId BIGINT = NULL,
    @LocId BIGINT = NULL,
    @DeptId BIGINT = NULL,
    @UserName NVARCHAR(100) = NULL
AS
BEGIN
    BEGIN TRY
        SELECT
            MST.CHECK_IN_MST_ID AS CheckInMstId,
            MST.COM_ID AS ComId,
            MST.LOC_ID AS LocId,
            MST.DEPT_ID AS DeptId,
            MST.FY_ID AS FyId,
            MST.IN_DATE AS InDate,
            MST.IN_TIME AS InTime,
            MST.SERIAL_NO AS SerialNo,
            MST.APP_NO AS AppNo,
            MST.NAME AS Name,
            MST.PLACE AS Place,
            GETDATE() AS MaxDate,
            DATEDIFF(MINUTE, MST.IN_DATE + MST.IN_TIME, GETDATE()) AS CALC_HOUR,
            MST.MOB_NO AS MOB_NO,
            MST.DAYS AS Days,
            MST.NO_OF_LOCKERS AS NoOfLockers,
            MST.OUT_DATE AS OutDate,
             MST.OUT_TIME AS OutTime,
            MST.ADVANCE AS Advance,
            MST.RENT AS Rent,
            MST.SERVER_NAME AS ServerName,
            MST.Entered_By AS EnteredBy,
            MST.Entered_On AS EnteredOn,
            MST.Modified_By AS ModifiedBy,
            MST.Modified_On AS ModifiedOn,
            MST.Machine_Name AS MachineName,
            MST.USER_ID AS UserId,
            MST.Record_Modified_Count AS RecordModifiedCount,
            ISNULL((
                SELECT COUNT(*)
                FROM LOCK_LOCKER_CHECK_IN_DET_T CINDET
                WHERE CINDET.CHECK_IN_MST_ID = MST.CHECK_IN_MST_ID
                AND LOCKER_ID NOT IN (
                    SELECT LOCKER_ID
                    FROM LOCK_LOCKER_CHECK_OUT_DET_T CODET
                    INNER JOIN LOCK_LOCKER_CHECK_OUT_MST_T COMST ON CODET.CHECK_OUT_MST_ID = COMST.CHECK_OUT_MST_ID
                    WHERE COMST.CHECK_IN_MST_ID = MST.CHECK_IN_MST_ID
                )
            ), 0) AS PendLockerCount
        FROM
            LOCK_LOCKER_CHECK_IN_MST_T MST
        WHERE
            (@LockerCheckInMstId IS NULL OR MST.CHECK_IN_MST_ID = @LockerCheckInMstId) AND
            (@Date IS NULL OR MST.IN_DATE = @Date) AND
            (@SerialNo IS NULL OR MST.SERIAL_NO = @SerialNo) AND
            (@ComId IS NULL OR MST.COM_ID = @ComId) AND
            (@LocId IS NULL OR MST.LOC_ID = @LocId) AND
            (@DeptId IS NULL OR MST.DEPT_ID = @DeptId) AND
            (@UserName IS NULL OR MST.Entered_By = @UserName)
        ORDER BY
            MST.IN_DATE DESC, MST.IN_TIME DESC, MST.SERIAL_NO DESC;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckInMstId]...';


GO
CREATE PROCEDURE SP_GetLockerCheckInMstId
    @MachineName NVARCHAR(100) = ''
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        CHECK_IN_MST_ID AS CheckInMstId, 
        SERIAL_NO AS SerialNo, 
        Entered_On AS EnteredOn 
    FROM 
        LOCK_LOCKER_CHECK_IN_MST_T
    WHERE 
        MACHINE_NAME = @MachineName OR @MachineName = ''

    ORDER BY 
        CHECK_IN_MST_ID DESC;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckOutDet]...';


GO
CREATE PROCEDURE SP_GetLockerCheckOutDet
    @LockerCheckOutMstId BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT
            CODET.CHECK_OUT_DET_ID AS LockerCheckOutDetId,
            CODET.CHECK_OUT_MST_ID AS LockerCheckOutMstId,
            ISNULL(L.LOCKER_ID, 0) AS LockerId,
            ISNULL(L.LOCKER_NAME, '') AS LockerName,
            ISNULL(L.STATUS, 0) AS LockerStatus,
            ISNULL(L.AVAILABLE_STATUS, 0) AS AvailableStatus,
            ISNULL(L.Record_Modified_Count, 0) AS RecordModifiedCount
        FROM
            LOCK_LOCKER_CHECK_IN_DET_T CIDET
        INNER JOIN
            LOCK_LOCKER_MST_T L ON CIDET.LOCKER_ID = L.LOCKER_ID
        INNER JOIN
            LOCK_LOCKER_CHECK_OUT_MST_T COMST ON CIDET.CHECK_IN_MST_ID = COMST.CHECK_IN_MST_ID
        RIGHT JOIN
            LOCK_LOCKER_CHECK_OUT_DET_T CODET ON CODET.CHECK_OUT_MST_ID = COMST.CHECK_OUT_MST_ID AND CODET.LOCKER_ID = CIDET.LOCKER_ID
        WHERE
            (@LockerCheckOutMstId IS NULL OR COMST.CHECK_OUT_MST_ID = @LockerCheckOutMstId OR ISNULL(COMST.CHECK_OUT_MST_ID, 0) = 0)
        ORDER BY
            CODET.CHECK_OUT_DET_ID DESC, L.LOCKER_NAME;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckOutMst]...';


GO
CREATE PROCEDURE SP_GetLockerCheckOutMst
    @LockerCheckOutMstId BIGINT = NULL,
    @Date DATE = NULL,
    @SerialNo BIGINT = NULL,
    @ComId BIGINT = NULL,
    @LocId BIGINT = NULL,
    @DeptId BIGINT = NULL,
    @FYId BIGINT = NULL,
    @UserName NVARCHAR(100) = NULL
AS
BEGIN
    BEGIN TRY
        SELECT 
            COUT.CHECK_OUT_MST_ID AS CheckOutMstId,
            COUT.COM_ID AS ComId,
            COUT.LOC_ID AS LocId,
            COUT.DEPT_ID AS DeptId,
            COUT.CTR_MACH_ID AS CtrMachId,
            COUT.FY_ID AS FyId,
            COUT.OUT_DATE AS OutDate,
            CONVERT(TIME, COUT.OUT_TIME) AS OutTime,
            COUT.SERIAL_NO AS SerialNo,
            COUT.CHECK_IN_MST_ID AS CheckInMstId,
            COUT.DAYS AS Days,
            COUT.NO_OF_LOCKERS AS NoOfLockers,
            COUT.ADVANCE AS Advance,
            COUT.RENT AS Rent,
            COUT.REFUND AS Refund,
            COUT.Record_Modified_Count AS RecordModifiedCount,
            COUT.USER_ID AS UserId,
            COUT.SERVER_NAME AS ServerName,
            COUT.Entered_By AS EnteredBy,
            COUT.Entered_On AS EnteredOn,
            COUT.Modified_By AS ModifiedBy,
            COUT.Modified_On AS ModifiedOn,
            COUT.Machine_Name AS MachineName,
            CIN.ADVANCE AS InAdvance,
            CIN.RENT AS InRent,
            CIN.SERIAL_NO AS InSerialNo,
            CIN.IN_DATE AS InDate,
            CONVERT(TIME, CIN.IN_TIME) AS InTime,
            CIN.APP_NO AS AppNo,
            CIN.NAME AS Name,
            CIN.PLACE AS Place,
            CIN.DAYS AS InDays,
            CIN.Record_Modified_Count AS InRecordModifiedCount
        FROM 
            LOCK_LOCKER_CHECK_OUT_MST_T COUT
        INNER JOIN 
            LOCK_LOCKER_CHECK_IN_MST_T CIN ON COUT.CHECK_IN_MST_ID = CIN.CHECK_IN_MST_ID
        WHERE 
            (@LockerCheckOutMstId IS NULL OR COUT.CHECK_OUT_MST_ID = @LockerCheckOutMstId) AND
            (@Date IS NULL OR COUT.OUT_DATE = @Date) AND
            (@SerialNo IS NULL OR COUT.SERIAL_NO = @SerialNo) AND
            (@ComId IS NULL OR COUT.COM_ID = @ComId) AND
            (@LocId IS NULL OR COUT.LOC_ID = @LocId) AND
            (@DeptId IS NULL OR COUT.DEPT_ID = @DeptId) AND
            (@FYId IS NULL OR COUT.FY_ID = @FYId) AND
            (@UserName IS NULL OR COUT.Entered_By = @UserName)
        ORDER BY 
            COUT.OUT_DATE DESC, COUT.OUT_TIME DESC, COUT.SERIAL_NO DESC;
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerCheckOutMstId]...';


GO
CREATE PROCEDURE SP_GetLockerCheckOutMstId
    @MachineName NVARCHAR(100) = NULL
AS
BEGIN
    BEGIN TRY
        SELECT CHECK_OUT_MST_ID AS CheckOutMstId, SERIAL_NO AS SerialNo, Entered_On AS EnteredOn
        FROM LOCK_LOCKER_CHECK_OUT_MST_T
        WHERE (@MachineName IS NULL OR MACHINE_NAME = @MachineName)
        ORDER BY CHECK_OUT_MST_ID DESC;
    END TRY
    BEGIN CATCH
        -- Handle exceptions if necessary
        RETURN -1;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetLockerReceiptDetail]...';


GO
CREATE PROCEDURE SP_GetLockerReceiptDetail
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT
            ISNULL(tbl_print_heading.heading, '') AS HEADING,
            ISNULL(subheading, '') AS SUBHEADING,
            LOC.Location_Name AS LOCATION_NAME,
            DEPT.Department_Name AS DEPARTMENT_NAME,
            CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            EGDT.Entered_By AS USER_NAME,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            EGDT.SERIAL_NO AS RCPT_NO,
            CONVERT(DATETIME, EGDT.OUT_DATE, 103) AS OUT_DATE,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME,
            LCIM.NAME AS BHAKT_NAME,
            EGDT.RENT
        FROM
            LOCK_LOCKER_CHECK_OUT_MST_T AS EGDT
        INNER JOIN
            COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN
            LOCK_LOCKER_CHECK_IN_MST_T AS LCIM ON EGDT.CHECK_IN_MST_ID = LCIM.CHECK_IN_MST_ID
        INNER JOIN
            COM_COUNTER_MACHINE_MST_T AS CMST ON EGDT.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN
            COM_DEPARTMENT_MST_T AS DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN
            COM_LOCATION_MST_T AS LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        CROSS JOIN
            tbl_print_heading
        WHERE
            (@CtrMachId = 0 OR EGDT.LOC_ID = @CtrMachId)
            AND (@FromDate = '' OR EGDT.OUT_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR EGDT.OUT_DATE <= CONVERT(DATETIME, @ToDate, 103))
        ORDER BY
            EGDT.OUT_DATE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetMaxLockers]...';


GO
CREATE PROCEDURE SP_GetMaxLockers
AS
BEGIN
    SET NOCOUNT ON;

    SELECT ISNULL(MAX_LOCKERS, 0) AS MAX_LOCKERS
    FROM LOCK_LOCKER_SETTING_T;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetMaxSerialNo]...';


GO
CREATE PROCEDURE [SP_GetMaxSerialNo]
    @lngCtrMachId BIGINT = 0,
    @lngComId BIGINT = 0,
    @lngLocId BIGINT = 0,
    @lngDeptId BIGINT = 0,
    @lngFYId BIGINT = 0
AS
BEGIN
    SELECT ISNULL(MAX(MST.SERIAL_NO), 0) AS SerialNo
    FROM LOCK_LOCKER_CHECK_IN_MST_T MST
    WHERE 1 = 1
        AND (@lngComId = 0 OR MST.COM_ID = @lngComId)
        AND (@lngLocId = 0 OR MST.LOC_ID = @lngLocId)
        AND (@lngDeptId = 0 OR MST.DEPT_ID = @lngDeptId)
        AND (@lngFYId = 0 OR MST.FY_ID = @lngFYId);
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetMaxSrNo]...';


GO
CREATE PROCEDURE SP_GetMaxSrNo
    @lngCtrMachId BIGINT = 0,
    @lngComId BIGINT = 0,
    @lngLocId BIGINT = 0,
    @lngDeptId BIGINT = 0,
    @lngFYId BIGINT = 0
AS
BEGIN
    SET NOCOUNT ON;

    SELECT ISNULL(MAX(MST.SERIAL_NO), 0) AS SerialNo
    FROM LOCK_LOCKER_CHECK_OUT_MST_T MST
    WHERE 
        (@lngCtrMachId = 0 OR MST.CTR_MACH_ID = @lngCtrMachId) AND
        (@lngComId = 0 OR MST.COM_ID = @lngComId) AND
        (@lngLocId = 0 OR MST.LOC_ID = @lngLocId) AND
        (@lngDeptId = 0 OR MST.DEPT_ID = @lngDeptId) AND
        (@lngFYId = 0 OR MST.FY_ID = @lngFYId);
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetMoreThan3Days]...';


GO
CREATE PROCEDURE [dbo].[SP_GetMoreThan3Days]
    @CtrMachId INT,
	@CallVal INT
    --@Date VARCHAR(20)
AS
BEGIN
    BEGIN TRY
	if @CallVal = 0
		BEGIN
			SELECT 
				IMST.SERIAL_NO,
				DEPT.Department_Short_Name AS DEPT_NAME,
				LMT.LOCKER_NAME AS ROOM_NAME,
				IMST.NAME,
				ISNULL(IMST.MOB_NO, '') AS mob_no,
				CONVERT(VARCHAR, IMST.IN_DATE, 103) AS DATE,
				CONVERT(VARCHAR, IMST.IN_TIME, 108) AS TIME,
				IMST.DAYS,
				DATEDIFF(DAY, CAST(IN_DATE AS DATE) + CAST(IN_TIME AS DATETIME), GETDATE()) AS DATDIFF,
				IMST.RENT + IMST.ADVANCE AS AMOUNT
			FROM 
				LOCK_LOCKER_CHECK_IN_MST_T IMST
			INNER JOIN 
				LOCK_LOCKER_CHECK_IN_DET_T IDET ON IMST.CHECK_IN_MST_ID = IDET.CHECK_IN_MST_ID
			INNER JOIN 
				LOCK_LOCKER_MST_T LMT ON LMT.LOCKER_ID = IDET.LOCKER_ID
			LEFT JOIN 
				COM_DEPARTMENT_MST_T DEPT ON DEPT.Department_Id = IMST.DEPT_ID
			WHERE 
				IMST.CHECK_IN_MST_ID NOT IN (SELECT CHECK_IN_MST_ID FROM LOCK_LOCKER_CHECK_OUT_MST_T)
				AND DATEDIFF(HOUR, CAST(IN_DATE AS DATE) + CAST(IN_TIME AS DATETIME), GETDATE()) > 72
			ORDER BY 
				DATEDIFF(DAY, CAST(IN_DATE AS DATE) + CAST(IN_TIME AS DATETIME), GETDATE()) DESC;
		END
	IF @CallVal = 1
		BEGIN
			SELECT 
            IMST.SERIAL_NO,
            DEPT.Department_Short_Name AS DEPT_NAME,
            LMT.LOCKER_NAME AS ROOM_NAME,
            IMST.NAME,
            ISNULL(IMST.MOB_NO, '') AS MOB_NO,
            CONVERT(VARCHAR, IMST.IN_DATE, 103) AS DATE,
            CONVERT(VARCHAR, IMST.IN_TIME, 108) AS TIME,
            IMST.DAYS,
            DATEDIFF(HOUR, CAST(IMST.OUT_DATE AS DATE) + CAST(IMST.OUT_TIME AS DATETIME), GETDATE()) AS DATDIFF,
            IMST.RENT + IMST.ADVANCE AS AMOUNT
			FROM 
			    LOCK_LOCKER_CHECK_IN_MST_T IMST
			INNER JOIN 
			    LOCK_LOCKER_CHECK_IN_DET_T IDET ON IMST.CHECK_IN_MST_ID = IDET.CHECK_IN_MST_ID
			INNER JOIN 
			    LOCK_LOCKER_MST_T LMT ON LMT.LOCKER_ID = IDET.LOCKER_ID
			LEFT JOIN 
			    COM_DEPARTMENT_MST_T DEPT ON DEPT.Department_Id = IMST.DEPT_ID
			WHERE 
			    IMST.loc_id = @CtrMachId
			    AND IMST.CHECK_IN_MST_ID NOT IN (SELECT CHECK_IN_MST_ID FROM LOCK_LOCKER_CHECK_OUT_MST_T WHERE loc_id = @CtrMachId)
			    AND IMST.OUT_DATE + IMST.OUT_TIME < DATEADD(HOUR, 2, GETDATE())
			ORDER BY 
			    IMST.CHECK_IN_MST_ID;
		END
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetPaymentModes]...';


GO
CREATE PROCEDURE SP_GetPaymentModes
AS
BEGIN
    SELECT ISNULL(Token_Detail_Id, 0) AS Token_Detail_Id,
           ISNULL(Token_Detail_Name, '') AS Token_Detail_Name,
           ISNULL(Token_Detail_code, '') AS Token_Detail_Code
    FROM com_token_det_t
    WHERE Token_Mst_Id = 6;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetPendingTransactions]...';


GO
CREATE PROCEDURE SP_GetPendingTransactions
    @strDate NVARCHAR(50),
    @intLocId BIGINT,
    @intFY_ID INT,
    @intModID SMALLINT
AS
BEGIN
    SELECT Convert(char, ToDate, 103) as ToDate,
           MinSerialNo,
           MaxSerialNo,
           TotalAmount,
           TotalReceipt,
           tknpayStatus.Token_Detail_Name as StatusName
    FROM DailyVoucherTransaction mst
    INNER JOIN com_token_det_t tknpayStatus ON tknpayStatus.Token_Detail_Id = mst.Status
    WHERE LOC_ID = @intLocId
      AND Status = 76
      AND MOD_ID = @intModID
      AND FY_ID = @intFY_ID;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetPendingTransactionsByCTR_MAC_ID]...';


GO
CREATE PROCEDURE SP_GetPendingTransactionsByCTR_MAC_ID
    @strDate NVARCHAR(50),
    @intCtrMachId BIGINT,
    @intLocId BIGINT,
    @intFY_ID INT,
    @intModID SMALLINT
AS
BEGIN
    SELECT Convert(char, ToDate, 103) as ToDate,
           MinSerialNo,
           MaxSerialNo,
           TotalAmount,
           TotalReceipt,
           tknpayStatus.Token_Detail_Name as StatusName
    FROM DailyVoucherTransaction mst
    INNER JOIN com_token_det_t tknpayStatus ON tknpayStatus.Token_Detail_Id = mst.Status
    WHERE CTR_MACH_ID = @intCtrMachId
      AND Status = 76
      AND MOD_ID = @intModID
      AND FY_ID = @intFY_ID;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetPrasadWatapData]...';


GO
CREATE PROCEDURE SP_GetPrasadWatapData
    @strFDate NVARCHAR(50),
    @strTDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT TOP 100 PERCENT
            IMST.ITEM_TITLE AS descr,
            SUM(DET.QTY) AS qty,
            ROUND(SUM(DET.AMOUNT) / SUM(DET.QTY), 2) AS rate,
            SUM(DET.AMOUNT) AS amount,
            NULL AS heading,
            @strFDate + ' to ' + @strTDate AS period,
            CMST.COUNTER_MACHINE_TITLE AS counternm,
            DEPT.Department_Name AS deptnm,
            LOC.Location_Name AS locationnm,
            NULL AS subheading,
            MST.Entered_By AS UserName,
            MST.PR_DATE AS PR_DATE,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS AccountingPeriod
        FROM
            MESS_PRINT_RECEIPT_MST_T MST
        INNER JOIN
            MESS_PRINT_RECEIPT_DET_T DET ON MST.PRINT_RECEIPT_MST_ID = DET.PRINT_RECEIPT_MST_ID
        INNER JOIN
            MESS_ITEM_MST_T IMST ON DET.ITEM_ID = IMST.ITEM_ID
        INNER JOIN
            COM_COUNTER_MACHINE_MST_T CMST ON MST.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN
            COM_DEPARTMENT_MST_T DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN
            COM_LOCATION_MST_T LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        INNER JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = MST.FY_ID
        WHERE
            (@intCtrMachId = 0 OR MST.CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR MST.PR_DATE >= CONVERT(DATETIME, @strFDate, 103))
            AND (@strTDate = '' OR MST.PR_DATE <= CONVERT(DATETIME, @strTDate, 103))
        GROUP BY
            IMST.ITEM_TITLE,
            CMST.COUNTER_MACHINE_TITLE,
            DEPT.Department_Name,
            LOC.Location_Name,
            MST.Entered_By,
            MST.PR_DATE,
            FY.DISPLAY_VALUE
        ORDER BY
            MST.PR_DATE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetReceiptDetailData]...';


GO
CREATE PROCEDURE SP_GetReceiptDetailData
    @strFDate NVARCHAR(50),
    @strTDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT 
            NULL AS HEADING,
            NULL AS SUBHEADING,
            LOC.Location_Name AS LOCATION_NAME,
            DEPT.Department_Name AS DEPARTMENT_NAME,
            CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            MST.Entered_By AS USER_NAME,
            MST.SERIAL_NO AS PRINT_RECEIPT_MST_ID,
            CONVERT(DATETIME, MST.PR_DATE, 103) AS PR_DATE,
            IMST.ITEM_TITLE AS ITEM_TITLE,
            DET.QTY AS QTY,
            DET.AMOUNT AS TOTAL_AMOUNT,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), MST.ENTERED_ON, 100), 7)) AS RECEIPT_TIME,
            @strFDate + ' to ' + @strTDate AS PERIOD,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD
        FROM
            MESS_PRINT_RECEIPT_MST_T MST
        INNER JOIN
            MESS_PRINT_RECEIPT_DET_T DET ON MST.PRINT_RECEIPT_MST_ID = DET.PRINT_RECEIPT_MST_ID
        INNER JOIN
            MESS_ITEM_MST_T IMST ON DET.ITEM_ID = IMST.ITEM_ID
        INNER JOIN
            COM_COUNTER_MACHINE_MST_T CMST ON MST.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN
            COM_DEPARTMENT_MST_T DEPT ON CMST.DEPT_ID = DEPT.DEPARTMENT_ID
        INNER JOIN
            COM_LOCATION_MST_T LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        INNER JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = MST.FY_ID
        WHERE
            (@intCtrMachId = 0 OR MST.CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR MST.PR_DATE >= CONVERT(DATETIME, @strFDate, 103))
            AND (@strTDate = '' OR MST.PR_DATE <= CONVERT(DATETIME, @strTDate, 103))
        ORDER BY
            MST.PR_DATE;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetRoomAdvanceVouchers]...';


GO
CREATE PROCEDURE SP_GetRoomAdvanceVouchers
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @strFromTime NVARCHAR(50),
    @strToTime NVARCHAR(50),
    @intCtrMachId BIGINT,
    @Locid BIGINT,
    @pid BIGINT
AS
BEGIN
    SELECT 
        ISNULL(th.HEADING, '') AS HEADING,
        ISNULL(th.SUBHEADING, '') AS SUBHEADING,
        ISNULL(cmt.COUNTER_MACHINE_TITLE, '') AS COUNTER_MACHINE_TITLE,
        ISNULL(dmt.Department_Name, '') AS Department_Name,
        ISNULL(lmt.Location_Name, '') AS LOCATION_NAME,
        ISNULL(dmt2.Department_Name, '') AS BhaktNiwas,
        STUFF((
                SELECT ',' + ROOM_NAME
                FROM RoomNames_Vw t2
                WHERE t2.CHECK_IN_MST_ID = egdt.CHECK_IN_MST_ID
                FOR XML PATH(''), TYPE
            ).value('.', 'VARCHAR(MAX)'), 1, 1, '') AS RoomNo,
        @strFromTime AS FromTime,
        @strToTime AS ToTime,
        EGDT.Entered_By AS USER_NAME,
        @strFromDate + ' to ' + @strToDate AS PERIOD,
        'Accounting Period : ' + fy.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
        EGDT.SERIAL_NO AS IN_RCPT_NO,
        CONVERT(DATETIME, EGDT.IN_DATE, 103) AS IN_DATE,
        LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME1,
        EGDT.NAME AS BHAKT_NAME1,
        EGDT.RENT AS RENT1,
        EGDT.ADVANCE,
        EGDT.Days,
        (
            SELECT COUNT(*)
            FROM BN_ROOM_CHECK_IN_DET_T
            WHERE CHECK_IN_MST_ID = egdt.CHECK_IN_MST_ID
        ) AS NOROOM
    FROM 
        BN_ROOM_CHECK_IN_MST_T AS EGDT
        INNER JOIN COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN tbl_print_heading AS th ON 1 = 1
        LEFT JOIN COM_COUNTER_MACHINE_MST_T AS cmt ON cmt.CTR_MACH_ID = EGDT.CTR_MACH_ID
        LEFT JOIN COM_DEPARTMENT_MST_T AS dmt ON dmt.Department_Id = EGDT.DEPT_ID
        LEFT JOIN COM_LOCATION_MST_T AS lmt ON lmt.Location_Id = EGDT.LOC_ID
        LEFT JOIN COM_DEPARTMENT_MST_T AS dmt2 ON dmt2.Department_Id = EGDT.SUBLOC_ID
    WHERE 
        EGDT.CHECKOUTSTATUS = 0
        AND (EGDT.SUBLOC_ID = @intCtrMachId OR @intCtrMachId = 0)
        AND (EGDT.PaymentType = @pid OR @pid = 0)
        AND (EGDT.LOC_ID = @Locid OR @Locid = 0);
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetRoomCheckInUserwise]...';


GO
CREATE PROCEDURE SP_GetRoomCheckInUserwise
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @strFromTime NVARCHAR(50),
    @strToTime NVARCHAR(50),
    @intCtrMachId BIGINT,
    @intlocid BIGINT,
    @ptype BIGINT
AS
BEGIN
    SELECT 
        ISNULL(th.HEADING, '') AS HEADING,
        ISNULL(th.SUBHEADING, '') AS SUBHEADING,
        @strFromDate + ' to ' + @strToDate AS PERIOD,
        @strFromTime AS FromTime,
        @strToTime AS ToTime,
        'Accounting Period : ' + fy.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
        ISNULL(dmt.Department_Name, '') AS DEPT_NAME,
        ISNULL(umt.User_First_Name, '') + ' ' + ISNULL(umt.User_Last_Name, '') AS UserName,
        SUM(ISNULL(mdt.RENT, 0)) AS TOTAL_AMOUNT,
        COUNT(ISNULL(mdt.CHECK_IN_MST_ID, 0)) AS TOTAL_RECEIPT,
        ISNULL(lmt.Location_Name, '') AS LOCATION
    FROM 
        BN_ROOM_CHECK_IN_MST_T mdt
        INNER JOIN COM_FINANCIAL_YEAR_MST_T fy ON mdt.FY_ID = fy.Financial_Year_Id
        INNER JOIN sec_user_mst_t umt ON umt.User_Id = mdt.User_Id
        INNER JOIN COM_LOCATION_MST_T lmt ON mdt.LOC_ID = lmt.Location_Id
        INNER JOIN COM_DEPARTMENT_MST_T dmt ON dmt.Department_Id = mdt.SUBLOC_ID
        LEFT JOIN TBL_PRINT_HEADING th ON 1 = 1
    WHERE 
        (mdt.CTR_MACH_ID = @intCtrMachId OR @intCtrMachId = 0)
        AND (mdt.PaymentType = @ptype OR @ptype = 0)
        AND (mdt.LOC_ID = @intlocid OR @intlocid = 0)
        AND (mdt.IN_DATE + mdt.IN_TIME >= @strFromDate + ' ' + @strFromTime OR @strFromDate = '')
        AND (mdt.IN_DATE + mdt.IN_TIME <= @strToDate + ' ' + @strToTime OR @strToDate = '')
    GROUP BY 
	th.HEADING,
	th.SUBHEADING,
        dmt.Department_Name,
        mdt.User_Id,
        umt.User_First_Name,
        umt.User_Last_Name,
        fy.DISPLAY_VALUE,
        dmt.Department_Id,
        lmt.Location_Name
    ORDER BY 
        LEN(dmt.Department_Name),
        dmt.Department_Name;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetRoomCheckOutUserwise]...';


GO
CREATE PROCEDURE SP_GetRoomCheckOutUserwise
    @strFromDate NVARCHAR(50),
    @strToDate NVARCHAR(50),
    @strFromTime NVARCHAR(50),
    @strToTime NVARCHAR(50),
    @intCtrMachId BIGINT,
    @intlocid BIGINT,
    @ptype BIGINT
AS
BEGIN
    SELECT 
        ISNULL(th.HEADING, '') AS HEADING,
        (SELECT Location_Name FROM COM_LOCATION_MST_T WHERE Location_Id = @intlocid) AS LOCATION,
        ISNULL(th.SUBHEADING, '') AS SUBHEADING,
        @strFromDate + ' to ' + @strToDate AS PERIOD,
        @strFromTime AS FromTime,
        @strToTime AS ToTime,
        'Accounting Period : ' + fy.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
        ISNULL(dmt.Department_Name, '') AS DEPT_NAME,
        ISNULL(umt.User_First_Name, '') + ' ' + ISNULL(umt.User_Last_Name, '') AS UserName,
        SUM(ISNULL(mdt.RENT, 0)) AS TOTAL_AMOUNT,
        COUNT(ISNULL(mdt.CHECK_OUT_MST_ID, 0)) AS TOTAL_RECEIPT
    FROM
        BN_ROOM_CHECK_OUT_MST_T mdt
        INNER JOIN COM_FINANCIAL_YEAR_MST_T fy ON mdt.FY_ID = fy.Financial_Year_Id
        INNER JOIN BN_ROOM_CHECK_IN_MST_T cit ON cit.CHECK_IN_MST_ID = mdt.CHECK_IN_MST_ID
        INNER JOIN sec_user_mst_t umt ON umt.User_Id = mdt.User_Id
        INNER JOIN COM_DEPARTMENT_MST_T dmt ON dmt.Department_Id = cit.SUBLOC_ID
        LEFT JOIN TBL_PRINT_HEADING th ON 1 = 1
    WHERE
        (mdt.CTR_MACH_ID = @intCtrMachId OR @intCtrMachId = 0)
        AND (cit.PaymentType = @ptype OR @ptype = 0)
        AND (mdt.LOC_ID = @intlocid OR @intlocid = 0)
        AND (mdt.OUT_DATE + mdt.OUT_TIME >= @strFromDate + ' ' + @strFromTime OR @strFromDate = '')
        AND (mdt.OUT_DATE + mdt.OUT_TIME <= @strToDate + ' ' + @strToTime OR @strToDate = '')
    GROUP BY
	th.HEADING,th.SUBHEADING,
        dmt.Department_Name,
        mdt.User_Id,
        umt.User_First_Name,
        umt.User_Last_Name,
        fy.DISPLAY_VALUE,
        dmt.Department_Id
    ORDER BY
        LEN(dmt.Department_Name),
        dmt.Department_Name;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetRoomReceiptDetail]...';


GO
CREATE PROCEDURE SP_GetRoomReceiptDetail
    @FromDate NVARCHAR(50),
    @ToDate NVARCHAR(50),
    @CtrMachId BIGINT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SELECT 
            ISNULL(tbl_print_heading.heading, '') AS HEADING,
            ISNULL(subheading, '') AS  SUBHEADING,
            LOC.Location_Name AS LOCATION_NAME,
            DEPT.Department_Name AS DEPARTMENT_NAME,
            CMST.COUNTER_MACHINE_TITLE AS COUNTER_MACHINE_TITLE,
            EGDT.Entered_By AS USER_NAME,
            @FromDate + ' to ' + @ToDate AS PERIOD,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS ACCOUNTING_PERIOD,
            EGDT.SERIAL_NO AS RCPT_NO,
            CONVERT(DATETIME, EGDT.OUT_DATE, 103) AS OUT_DATE,
            LTRIM(RIGHT(CONVERT(VARCHAR(20), EGDT.ENTERED_ON, 100), 7)) AS RECEIPT_TIME,
            STUFF((SELECT ',' + ROOM_NAME FROM RoomNames_Vw t2 WHERE t2.CHECK_IN_MST_ID = LCIM.CHECK_IN_MST_ID FOR XML PATH(''), TYPE).value('.', 'varchar(max)'), 1, 1, '') AS ROOM_NO,
            LCIM.NAME AS BHAKT_NAME,
            EGDT.RENT
        FROM 
            BN_ROOM_CHECK_OUT_MST_T AS EGDT
        INNER JOIN 
            COM_FINANCIAL_YEAR_MST_T AS FY ON EGDT.FY_ID = FY.Financial_Year_Id
        INNER JOIN 
            BN_ROOM_CHECK_IN_MST_T LCIM ON EGDT.CHECK_IN_MST_ID = LCIM.CHECK_IN_MST_ID
        INNER JOIN 
            COM_COUNTER_MACHINE_MST_T CMST ON EGDT.CTR_MACH_ID = CMST.CTR_MACH_ID
        INNER JOIN 
            COM_DEPARTMENT_MST_T DEPT ON LCIM.SUBLOC_ID = DEPT.DEPARTMENT_ID
        INNER JOIN 
            COM_LOCATION_MST_T LOC ON DEPT.LOCATION_ID = LOC.LOCATION_ID
        CROSS JOIN 
            tbl_print_heading
        WHERE 
            (@CtrMachId = 0 OR EGDT.CTR_MACH_ID = @CtrMachId)
            AND (@FromDate = '' OR EGDT.OUT_DATE >= CONVERT(DATETIME, @FromDate, 103))
            AND (@ToDate = '' OR EGDT.OUT_DATE <= CONVERT(DATETIME, @ToDate, 103))
        ORDER BY 
            EGDT.OUT_DATE;
            
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetSearchDataNew]...';


GO
CREATE PROCEDURE [dbo].[SP_GetSearchDataNew]
    @TableName NVARCHAR(100),
    @FromDate NVARCHAR(20),
    @ToDate NVARCHAR(20),
    @Name NVARCHAR(100),
    @CtrMachId NVARCHAR(20),
    @LocId NVARCHAR(20),
    @UserId NVARCHAR(20)
AS
BEGIN
    DECLARE @Query NVARCHAR(MAX);
    SET @Query = 'SELECT * FROM ' + @TableName + ' WHERE TRAN_DATE BETWEEN Convert(DateTime, '''+ @FromDate +''', 103) AND Convert(DateTime, '''+@ToDate+''', 103) ';

    IF @Name != ''
    BEGIN
        IF ISNUMERIC(@Name) = 1
            SET @Query += ' AND serial_no LIKE '+@Name+'% ';
        ELSE
            SET @Query += ' AND name LIKE '+@Name+'% ';
    END

    IF @CtrMachId > 0
        SET @Query += ' AND CTR_MACH_ID = '+@CtrMachId+' ';

    IF @LocId > 0
        SET @Query += ' AND LOC_ID = '+@LocId+' ';

    IF @UserId > 0
        SET @Query += ' AND DEPT_ID IN (SELECT SUBLOCATION_ID FROM SEC_USER_SUBLOCATION_MST_T WHERE USER_ID = '+@UserId+') ';

    SET @Query += ' ORDER BY TRAN_DATE DESC;';
	--select @Query;
    EXEC sp_executesql @Query;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetStatesByCountryId]...';


GO
CREATE PROCEDURE SP_GetStatesByCountryId
    @CountryId INT
AS
BEGIN
    SELECT StateId, StateName
    FROM States
    WHERE CountryId = @CountryId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetSystemDate]...';


GO
CREATE PROCEDURE SP_GetSystemDate
AS
BEGIN
    SELECT CONVERT(DATETIME, CONVERT(VARCHAR, GETDATE(), 101)) AS SyDate;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetSystemTime]...';


GO
CREATE PROCEDURE SP_GetSystemTime
AS
BEGIN
    SELECT DATEADD(HOUR, 0, CONVERT(VARCHAR, GETDATE(), 108)) AS SysTime;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetTIDByCounterId]...';


GO
CREATE PROCEDURE SP_GetTIDByCounterId
    @CounterId INT
AS
BEGIN
    SELECT tidNo, Tid
    FROM COM_TID_MST_T
    WHERE counter_id = @CounterId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetToyTrainDailyReceiptData]...';


GO
CREATE PROCEDURE SP_GetToyTrainDailyReceiptData
    @strFDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT
            NULL AS Heading,
            NULL AS subheading,
            FIRST_RECEIPT_NO,
            LAST_RECEIPT_NO,
            TOTAL_AMOUNT,
            COUNTER_MACHINE_TITLE,
            ISNULL(USER_NAME, '') AS USERNAME,
            CASE ISNULL(Location_Name, '') WHEN '' THEN '' ELSE 'Location: ' + Location_Name END AS Location_Name,
            CASE ISNULL(Department_Name, '') WHEN '' THEN '' ELSE 'Sublocation: ' + Department_Name END AS Department_Name,
            @strFDate AS prntdate,
            'Accounting Period: ' + DISPLAY_VALUE AS AccountingPeriod
        FROM
            TOY_TRAIN_DAILY_RECEIPT_LIST
        WHERE
            (@intCtrMachId = 0 OR CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR TT_DATE = CONVERT(DATETIME, @strFDate, 103));

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetToyTrainUserWiseData]...';


GO
CREATE PROCEDURE SP_GetToyTrainUserWiseData
    @strFDate NVARCHAR(50),
    @strTDate NVARCHAR(50),
    @intCtrMachId BIGINT
AS
BEGIN
    BEGIN TRY
        SELECT
            NULL AS Heading,
            NULL AS subheading,
            CMT.COUNTER_MACHINE_TITLE,
            ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
            SUM(ISNULL(TDT.AMOUNT, 0)) AS TOTAL_AMOUNT,
            COUNT(ISNULL(TDT.TOY_TRAIN_DET_ID, 0)) AS TOTAL_RECEIPT,
            @strFDate + ' to ' + @strTDate AS period,
            'Accounting Period : ' + FY.DISPLAY_VALUE AS AccountingPeriod,
            SUM((ISNULL(TDT.ADULT_NO, 0) + ISNULL(TDT.CHILD_NO, 0) + ISNULL(TDT.TRIP_NO, 0))) AS USER_COUNT
        FROM
            TOY_TRAIN_DET_T TDT
        JOIN
            COM_COUNTER_MACHINE_MST_T CMT ON TDT.CTR_MACH_ID = CMT.CTR_MACH_ID
        JOIN
            sec_user_mst_t UMT ON UMT.User_Id = TDT.USER_ID
        JOIN
            COM_FINANCIAL_YEAR_MST_T FY ON FY.Financial_Year_Id = TDT.FY_ID
        WHERE
            (@intCtrMachId = 0 OR TDT.CTR_MACH_ID = @intCtrMachId)
            AND (@strFDate = '' OR TDT.TT_DATE >= CONVERT(DATETIME, @strFDate, 103))
            AND (@strTDate = '' OR TDT.TT_DATE <= CONVERT(DATETIME, @strTDate, 103))
        GROUP BY
            CMT.COUNTER_MACHINE_TITLE, FY.DISPLAY_VALUE, TDT.USER_ID, UMT.User_Last_Name, UMT.User_First_Name;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetUserCounterMachineDetails]...';


GO
CREATE PROCEDURE [dbo].[SP_GetUserCounterMachineDetails]
    @UserId INT,
    @HddModelNo NVARCHAR(100),
    @HddSerialNo NVARCHAR(100) = NULL,
    @MacId NVARCHAR(100) = NULL,
    @ModType INT,
    @CtrMachId INT = NULL
AS
BEGIN
    SELECT COUNTER_MACHINE_TITLE AS CounterMachineTitle,
           COUNTER_MACHINE_SHORT_NAME AS CounterMachineShortName,
           CTR_MACH_ID AS CtrMachId,
           DEPT_ID AS DeptId,
           Department_Name AS DepartmentName,
           Loc_Name AS LocName,
           LOC_FNAME AS LOC_FNAME,
           LOC_ID AS LocId
    FROM SEC_USER_COUNTER_MST_V
    WHERE ACTIVE = 1
      AND User_Id = @UserId
      AND (@ModType = 0 OR mod_type = @ModType)
      AND (@CtrMachId = 0 OR CTR_MACH_ID = @CtrMachId)
      AND MACHINE_ID IN (@HddModelNo, @HddSerialNo, @MacId)
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetUserDetails]...';


GO
CREATE PROCEDURE SP_GetUserDetails
@MachineId NVARCHAR(50),
@UserId INT = NULL
AS
BEGIN
    IF @UserId IS NOT NULL
    BEGIN
        SELECT *
        FROM SEC_USER_COUNTER_MST_V
        WHERE MACHINE_ID = @MachineId
        AND User_Id = @UserId;
    END
    ELSE
    BEGIN
        SELECT TOP 1 *
        FROM SEC_USER_COUNTER_MST_V
        WHERE MACHINE_ID = @MachineId;
    END
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetUserTotalAction]...';


GO
CREATE PROCEDURE SP_GetUserTotalAction
    @UserId INT = NULL,
    @ScreenId BIGINT = NULL,
    @ActionId BIGINT = NULL
AS
BEGIN
    SELECT ACTION_ID AS ActionId
    FROM SEC_USER_TOTAL_ACTION_MST_V
    WHERE (@UserId IS NULL OR USER_ID = @UserId)
    AND (@ScreenId IS NULL OR SCREEN_ID = @ScreenId)
    AND (@ActionId IS NULL OR ACTION_ID = @ActionId);
END
GO
PRINT N'Creating Procedure [dbo].[SP_InsertDamagedLocker]...';


GO
CREATE PROCEDURE SP_InsertDamagedLocker
    @LockerId INT,
    @Reason NVARCHAR(255),
    @Date DATE
AS
BEGIN
    BEGIN TRY
        INSERT INTO LOCK_DAMAGED_LOCKERS (LOCKER_ID, REASON, DATE)
        VALUES (@LockerId, @Reason, @Date);
        
        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_InsertLockerChange]...';


GO
CREATE PROCEDURE SP_InsertLockerChange
    @CheckInMstId INT,
    @PrevLockerId INT,
    @Reason NVARCHAR(MAX),
    @UserId INT,
    @ServerName NVARCHAR(100),
    @EnteredBy NVARCHAR(100),
    @ModifiedBy NVARCHAR(100),
    @MachineName NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO LOCK_LOCKER_CHANGE_T
    (
        CHECK_IN_MST_ID,
        PREV_LOCKER_ID,
        REASON,
        USER_ID,
        SERVER_NAME,
        ENTERED_BY,
        MODIFIED_BY,
        MACHINE_NAME
    )
    VALUES
    (
        @CheckInMstId,
        @PrevLockerId,
        @Reason,
        @UserId,
        @ServerName,
        @EnteredBy,
        @ModifiedBy,
        @MachineName
    );
END
GO
PRINT N'Creating Procedure [dbo].[SP_InsertLockerCheckInDet]...';


GO
CREATE PROCEDURE [dbo].[SP_InsertLockerCheckInDet]
    @CheckInMstId INT,
    @LockerId INT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO LOCK_LOCKER_CHECK_IN_DET_T (CHECK_IN_MST_ID,LOCKER_ID)
    VALUES (@CheckInMstId,@LockerId);
END
GO
PRINT N'Creating Procedure [dbo].[SP_InsertLockerCheckInMst]...';


GO
CREATE PROCEDURE [dbo].[SP_InsertLockerCheckInMst]
    @ComId INT,
    @LocId INT,
    @DeptId INT,
    @CtrMachId INT,
    @FyId INT,
    @InDate DATE,
    @InTime TIME,
    @Name NVARCHAR(100),
    @Place NVARCHAR(100),
    @Days INT,
    @NoOfLockers INT,
    @OutDate DATE,
    @OutTime TIME,
    @Advance DECIMAL(18, 2),
    @Rent DECIMAL(18, 2),
    @UserId INT,
    @ServerName NVARCHAR(100),
    @EnteredBy NVARCHAR(50),
    @ModifiedBy NVARCHAR(50),
    @MachineName NVARCHAR(100),
    @MobNo NVARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO LOCK_LOCKER_CHECK_IN_MST_T (COM_ID, LOC_ID, DEPT_ID, CTR_MACH_ID, FY_ID, IN_DATE, IN_TIME, NAME, PLACE, DAYS, NO_OF_LOCKERS, OUT_DATE, OUT_TIME, ADVANCE, RENT, USER_ID, SERVER_NAME, ENTERED_BY, MODIFIED_BY, MACHINE_NAME, MOB_NO)
    VALUES (@ComId, @LocId, @DeptId, @CtrMachId, @FyId, @InDate, @InTime, @Name, @Place, @Days, @NoOfLockers, @OutDate, @OutTime, @Advance, @Rent, @UserId, @ServerName, @EnteredBy, @ModifiedBy, @MachineName, @MobNo);
END
GO
PRINT N'Creating Procedure [dbo].[SP_InsertLockerCheckOutDet]...';


GO
CREATE PROCEDURE [dbo].[SP_InsertLockerCheckOutDet]
    @CheckOutMstId INT,
    @LockerId INT
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO LOCK_LOCKER_CHECK_OUT_DET_T (CHECK_OUT_MST_ID,LOCKER_ID)
    VALUES (@CheckOutMstId,@LockerId);
END
GO
PRINT N'Creating Procedure [dbo].[SP_InsertLockerCheckOutMst]...';


GO
CREATE PROCEDURE [dbo].[SP_InsertLockerCheckOutMst]
    @ComId BIGINT,
    @LocId BIGINT,
    @DeptId BIGINT,
    @CtrMachId BIGINT,
    @FyId BIGINT,
    @OutDate DATETIME,
    @OutTime DATETIME,
    @CheckInMstId BIGINT,
    @Days INT,
    @NoOfLockers INT,
    @Advance DECIMAL(18, 2),
    @Rent DECIMAL(18, 2),
    @Refund DECIMAL(18, 2),
    @UserId BIGINT,
    @ServerName NVARCHAR(100),
    @EnteredBy NVARCHAR(100),
    @ModifiedBy NVARCHAR(100),
    @MachineName NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO LOCK_LOCKER_CHECK_OUT_MST_T (
        COM_ID, LOC_ID, DEPT_ID, CTR_MACH_ID, FY_ID, OUT_DATE, OUT_TIME, 
        CHECK_IN_MST_ID, DAYS, NO_OF_LOCKERS, ADVANCE, RENT, REFUND, 
        USER_ID, SERVER_NAME, ENTERED_BY, MODIFIED_BY, MACHINE_NAME
    ) VALUES (
        @ComId, @LocId, @DeptId, @CtrMachId, @FyId, @OutDate, @OutTime, 
        @CheckInMstId, @Days, @NoOfLockers, @Advance, @Rent, @Refund, 
        @UserId, @ServerName, @EnteredBy, @ModifiedBy, @MachineName
    );
END
GO
PRINT N'Creating Procedure [dbo].[SP_InsertRoomExtend]...';


GO
CREATE PROCEDURE SP_InsertRoomExtend
    @LocId INT,
    @DeptId INT,
    @CtrMachId INT,
    @CheckInMstId INT,
    @ExtDate DATETIME,
    @ExtRent DECIMAL(18, 2),
    @ExtDay INT,
    @EnteredBy NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO LOC_LOCKER_EXTEND_T
    (
        LOC_ID,
        DEPT_ID,
        CTR_MACH_ID,
        CHECK_IN_MST_ID,
        EXTEND_DATE,
        RENT,
        DAYS,
        ENTERED_BY,
        ENTERED_ON
    )
    VALUES
    (
        @LocId,
        @DeptId,
        @CtrMachId,
        @CheckInMstId,
        @ExtDate,
        @ExtRent,
        @ExtDay,
        @EnteredBy,
        GETDATE()
    );
END
GO
PRINT N'Creating Procedure [dbo].[SP_UpdateLockerCheckInMst]...';


GO
CREATE PROCEDURE SP_UpdateLockerCheckInMst
    @CheckInMstId INT,
    @Days INT,
    @Rent DECIMAL(18, 2)
AS
BEGIN
    BEGIN TRY
        UPDATE LOCK_LOCKER_CHECK_IN_MST_T
        SET 
            Days = @Days,
            Rent = @Rent
        WHERE CHECK_IN_MST_ID = @CheckInMstId;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_UpdateLockerCheckInMstRent]...';


GO
CREATE PROCEDURE SP_UpdateLockerCheckInMstRent
    @CheckInMstId BIGINT,
    @Rent DECIMAL(18, 2),
    @Days INT,
    @ModifiedBy NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE LOCK_LOCKER_CHECK_IN_MST_T
    SET
        RENT = @Rent,
        DAYS = @Days,
        Modified_By = @ModifiedBy,
        Modified_On = GETDATE()
    WHERE
        CHECK_IN_MST_ID = @CheckInMstId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_UpdateLockerCheckOutMst]...';


GO
CREATE PROCEDURE SP_UpdateLockerCheckOutMst
    @CheckOutMstId INT,
    @Days INT,
    @NoOfLockers INT,
    @Advance DECIMAL(18, 2),
    @Rent DECIMAL(18, 2),
    @Refund DECIMAL(18, 2),
    @ModifiedBy NVARCHAR(100),
    @MachineName NVARCHAR(100),
    @RecordModifiedCount INT
AS
BEGIN
    BEGIN TRY
        UPDATE LOCK_LOCKER_CHECK_OUT_MST_T
        SET 
            Days = @Days,
            No_Of_Lockers = @NoOfLockers,
            Advance = @Advance,
            Rent = @Rent,
            Refund = @Refund,
            Modified_By = @ModifiedBy,
            Modified_On = GETDATE(),
            Machine_Name = @MachineName,
            Record_Modified_Count = @RecordModifiedCount
        WHERE CHECK_OUT_MST_ID = @CheckOutMstId;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_UpdateLockerMaster]...';


GO
CREATE PROCEDURE SP_UpdateLockerMaster
    @CheckInMstId INT,
    @Name NVARCHAR(MAX),
    @Place NVARCHAR(MAX),
    @Days INT,
    @NoOfLockers INT,
    @OutDate DATE,
    @OutTime TIME,
    @Advance DECIMAL(18, 2),
    @Rent DECIMAL(18, 2),
    @ModifiedBy NVARCHAR(MAX),
    @MachineName NVARCHAR(MAX),
    @MobNo NVARCHAR(MAX),
    @RecordModifiedCount INT
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE LOCK_LOCKER_CHECK_IN_MST_T
    SET 
        Name = @Name,
        Place = @Place,
        Days = @Days,
        No_Of_Lockers = @NoOfLockers,
        Out_Date = @OutDate,
        Out_Time = @OutTime,
        Advance = @Advance,
        Rent = @Rent,
        Modified_By = @ModifiedBy,
        Modified_On = GETDATE(),
        Machine_Name = @MachineName,
        MOB_NO = @MobNo,
        Record_Modified_Count = @RecordModifiedCount
    WHERE CHECK_IN_MST_ID = @CheckInMstId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_UpdateLockerMst]...';


GO
CREATE PROCEDURE SP_UpdateLockerMst
    @LockerId INT,
    @ActiveInactiveStatus INT,
    @AvailableStatus INT
AS
BEGIN
    BEGIN TRY
        UPDATE LOCK_LOCKER_MST_T
        SET AVAILABLE_STATUS = @AvailableStatus,
            Modified_On = GETDATE()
        WHERE Locker_Id = @LockerId;

        -- Optionally, update STATUS if needed:
        -- UPDATE LOCK_LOCKER_MST_T
        -- SET STATUS = @ActiveInactiveStatus
        -- WHERE Locker_Id = @LockerId;

        RETURN 0; -- Success
    END TRY
    BEGIN CATCH
        RETURN -1; -- Error
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[SP_UpdateLockerStatus]...';


GO
CREATE PROCEDURE SP_UpdateLockerStatus
    @LockerId INT,
    @AvailableStatus INT,
    @ModifiedBy NVARCHAR(50),
    @RecordModifiedCount INT
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE LOCK_LOCKER_MST_T
    SET 
        AVAILABLE_STATUS = @AvailableStatus,
        Modified_By = @ModifiedBy,
        Modified_On = GETDATE(),
        Record_Modified_Count = @RecordModifiedCount
    WHERE 
        Locker_ID = @LockerId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_UpdateStatusDailyVoucher]...';


GO
CREATE PROCEDURE SP_UpdateStatusDailyVoucher
    @DailyVou_ID BIGINT
AS
BEGIN
    UPDATE DailyVoucherTransaction 
    SET Status = 75
    WHERE ID = @DailyVou_ID;
END
GO
PRINT N'Update complete.';


GO


-- Scripts by Darshan END

USE [OSOL23]
GO

/****** Object:  Table [dbo].[PAYMENT_TYPE_MST]    Script Date: 21-03-2024 09:53:07 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[PAYMENT_TYPE_MST](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[LOC_ID] [int] NULL,
	[COUNTER_ID] [int] NULL,
	[MODULE_ID] [int] NULL,
	[PAYMENT_TYPE] [int] NULL,
	[STATUS] [bit] NULL,
	[ENTERED_BY] [varchar](50) NULL,
	[ENTERED_ON] [datetime] NULL,
 CONSTRAINT [PK_PAYMENT_TYPE_MST] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PAYMENT_TYPE_MST] ADD  CONSTRAINT [DF_PAYMENT_TYPE_MST_ENTERED_ON]  DEFAULT (getdate()) FOR [ENTERED_ON]
GO


USE [OSOL23]
GO

/****** Object:  View [dbo].[DEN_Dengi_Receipt_View]    Script Date: 21-03-2024 09:57:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








ALTER VIEW [dbo].[DEN_Dengi_Receipt_View]
AS
SELECT     CMT.DEPT_ID, DMT.Department_Id, LMT.Location_Id, ISNULL(CMT.COUNTER_MACHINE_TITLE, '') AS COUNTER, ISNULL(DMT.Department_Name, '')
                       AS Department_Name, ISNULL(LMT.Location_Name, '') AS Location_Name, ISNULL(UMT.User_First_Name, '') + ' ' + ISNULL(UMT.User_Last_Name, '') AS UserName,
					   
					    (
        CASE 
            WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID <> 7 THEN 
                (SELECT ISNULL(DETAILS ,'') FROM DEN_DENGI_AMOUNT_DETAILS WHERE id = 1)
           ELSE  (
            SELECT CONCAT(
                ISNULL((SELECT DETAILS FROM DEN_DENGI_AMOUNT_DETAILS WHERE id = 1), ''),
                ' ',
                ISNULL((SELECT DETAILS FROM DEN_DENGI_AMOUNT_DETAILS WHERE id = 2), '')
            )
			)
        END
    ) AS DECLARATION,


	
					    (
        CASE 
            WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 8 THEN 
                (SELECT FROM_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=8)
				 WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID =9  THEN 
                (SELECT FROM_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=9)
           WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 7 THEN 
                (SELECT FROM_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=7)
				 WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 202 THEN 
                (SELECT FROM_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=202)
				 WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 181 THEN 
                (SELECT FROM_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=181)
			
        END
    ) AS FROM_AMOUNT,

				    (
        CASE 
            WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 8 THEN 
                (SELECT TO_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=8)
				 WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID =9  THEN 
                (SELECT TO_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=9)
           WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 7 THEN 
                (SELECT TO_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=7)
				 WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 202 THEN 
                (SELECT TO_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=202)
				 WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 181 THEN 
                (SELECT TO_AMT from DEN_EIGHTY_CRITERIA  where PAYMENT_TYPE_ID=181)
			
        END
    ) AS TO_AMOUNT,

	CASE
    WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID = 8 
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT >= (SELECT FROM_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 8) 
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT <= (SELECT TO_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 8) 
    THEN 1
	  WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID =  7
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT >= (SELECT FROM_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 7) 
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT <= (SELECT TO_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 7) 
    THEN 1
	WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID =  202
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT >= (SELECT FROM_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 202) 
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT <= (SELECT TO_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 202) 
    THEN 1
	WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID =  181
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT >= (SELECT FROM_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 181) 
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT <= (SELECT TO_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 181) 
    THEN 1
		WHEN DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID =  9
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT >= (SELECT FROM_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 9) 
        AND DEN_DENGI_RECEIPT_MST_T.AMOUNT <= (SELECT TO_AMT FROM DEN_EIGHTY_CRITERIA WHERE PAYMENT_TYPE_ID = 9) 
    THEN 1
	else
	0
   
END AS DEC_STATUS,

					   (SELECT     ISNULL(heading, '') AS Expr1
                            FROM          dbo.tbl_print_heading) AS HEADING,
                          (SELECT     ISNULL(subheading, '') AS Expr1
                            FROM          dbo.tbl_print_heading AS tbl_print_heading_1) AS SUBHEADING, dbo.DEN_DENGI_RECEIPT_MST_T.LOC_ID AS Expr1, 
                      dbo.DEN_DENGI_RECEIPT_MST_T.AMOUNT,DEN_DENGI_RECEIPT_MST_T.NAME ,DEN_DENGI_RECEIPT_MST_T.CONTACT, DEN_DENGI_RECEIPT_MST_T.ADDRESS, DEN_DENGI_RECEIPT_MST_T.TALUKA,
					  DEN_DENGI_RECEIPT_MST_T.CARD_BANK_NAME,DEN_DENGI_RECEIPT_MST_T.CARD_BANK_REF_NO, DEN_DENGI_RECEIPT_MST_T.CHQ_BANK_NAME,dbo.DEN_DENGI_RECEIPT_MST_T.CHQ_NO,
					  DEN_DENGI_RECEIPT_MST_T.CHQ_DATE, DEN_DENGI_RECEIPT_MST_T.DD_BANK_NAME, DEN_DENGI_RECEIPT_MST_T.DD_DATE, DEN_DENGI_RECEIPT_MST_T.DD_NO,
					 DEN_DENGI_RECEIPT_MST_T.NET_BANK_NAME,DEN_DENGI_RECEIPT_MST_T.NET_BANK_REF_NO , DEN_DENGI_RECEIPT_MST_T.PANNumber, DEN_DENGI_RECEIPT_MST_T.PINCODE,  COM_LOOKUP_VALUES_MST_T.Lookup_Value_Name as DOC_TYPE,
					 DEN_DENGI_RECEIPT_MST_T.DOC_DETAIL, MST.TYPE,MST.PAYMENT_TYPE_IDS, T.Token_Detail_Name,DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID, DEN_DENGI_RECEIPT_MST_T.INVOICE_NO,
					  dbo.DEN_DENGI_RECEIPT_MST_T.USER_ID AS Expr2,DEN_DENGI_RECEIPT_MST_T.DENGI_MST_ID,
                      dbo.DEN_DENGI_RECEIPT_MST_T.SERIAL_NO, dbo.DEN_DENGI_RECEIPT_MST_T.CTR_MACH_ID AS Expr4,dbo.DEN_DENGI_RECEIPT_MST_T.CTR_MACH_ID as CTR_MACH_ID,
                      dbo.DEN_DENGI_RECEIPT_MST_T.DENGI_RECEIPT_ID as DENGI_RECEIPT_ID, COM_TID_MST_T.tidNo,
					  SUBSTRING(CMT.COUNTER_MACHINE_SHORT_NAME,1,3)+'/'+CAST(DEN_DENGI_RECEIPT_MST_T.DENGI_RECEIPT_ID AS VARCHAR) AS RECEIPT_DETAIL_ID,
					isnull(DEN_DENGI_RECEIPT_MST_T.DR_DATE,'') as DR_DATE1,DEN_DENGI_RECEIPT_MST_T.GOTRA_NAME,
					ISNULL(UMT.User_Id,0) AS User_Id, UMT.User_Login_Name ,States.StateName ,Districts.DistrictName,
			
convert(varchar,DEN_DENGI_RECEIPT_MST_T.entered_on,103) as DR_DATE,
FORMAT(DEN_DENGI_RECEIPT_MST_T.entered_on, 'HH:mm:ss') AS Time,
ISNULL(DEN_DENGI_RECEIPT_MST_T.ENTERED_ON,'') AS ENTERED_ON
FROM         dbo.COM_DEPARTMENT_MST_T AS DMT RIGHT OUTER JOIN
                      dbo.DEN_DENGI_RECEIPT_MST_T INNER JOIN
                      dbo.sec_user_mst_t AS UMT ON dbo.DEN_DENGI_RECEIPT_MST_T.USER_ID = UMT.User_Id INNER JOIN
                      dbo.COM_COUNTER_MACHINE_MST_T AS CMT ON dbo.DEN_DENGI_RECEIPT_MST_T.CTR_MACH_ID = CMT.CTR_MACH_ID ON DMT.Department_Id = CMT.DEPT_ID INNER JOIN
					  dbo.COM_LOCATION_MST_T AS LMT ON CMT.LOC_ID = LMT.Location_Id
					  LEFT JOIN DEN_DENGI_MASTER_T MST ON DEN_DENGI_RECEIPT_MST_T.DENGI_MST_ID=MST.DENGI_MST_ID
					  LEFT JOIN com_token_det_t T ON DEN_DENGI_RECEIPT_MST_T.PAYMENT_TYPE_ID=T.Token_Detail_Id
					  INNER JOIN States ON DEN_DENGI_RECEIPT_MST_T.STATE_ID= States.StateId
					  INNER JOIN Districts on DEN_DENGI_RECEIPT_MST_T.DISTRICT_ID=Districts.DistrictId
					  left join COM_TID_MST_T on DEN_DENGI_RECEIPT_MST_T.TID_ID= COM_TID_MST_T.Tid
					  left join COM_LOOKUP_VALUES_MST_T on Lookup_Value_Id=DEN_DENGI_RECEIPT_MST_T.DOC_TYPE
GO






GO
/****** Object:  StoredProcedure [dbo].[SP_DML_MESS_PRINT_RECEIPT_DET]    Script Date: 09-03-2024 14:06:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [dbo].[SP_DML_MESS_PRINT_RECEIPT_DET]
(
@PRINT_RECEIPT_MST_ID INT,
@ITEM_ID INT,
@PRICE INT,
@QTY INT,
@AMOUNT DECIMAL,
@PR_DATE DATETIME,
@DEPT_ID INT,
@GUEST1 BIT,
@PRINT_RECEIPT_ID_DET INT OUTPUT

)
AS
BEGIN
DECLARE @PRINT_RECEIPT_ITEM_ID NUMERIC(10,0)
DECLARE @SERIAL_NO NUMERIC(10,0)
DECLARE @PRINT_RECEIPT_VALUE NUMERIC(10,0)
 DECLARE @incrementValue INT  
  SET @incrementValue = ISNULL(@incrementValue, 0) + 1;
SELECT @SERIAL_NO=SERIAL_NO FROM  MESS_PRINT_RECEIPT_MST_T WHERE PRINT_RECEIPT_MST_ID=@PRINT_RECEIPT_MST_ID

PRINT @SERIAL_NO

IF EXISTS(SELECT ITEM_PRINT_RECEIPT_ID FROM MESS_PRINT_RECEIPT_DET_T WHERE PRINT_RECEIPT_MST_ID=@PRINT_RECEIPT_MST_ID)
BEGIN
SELECT @PRINT_RECEIPT_VALUE= ITEM_PRINT_RECEIPT_ID FROM MESS_PRINT_RECEIPT_DET_T WHERE PRINT_RECEIPT_MST_ID=@PRINT_RECEIPT_MST_ID
SELECT @PRINT_RECEIPT_ITEM_ID=CAST(@PRINT_RECEIPT_VALUE AS INT)+1
END
ELSE
BEGIN
SELECT @PRINT_RECEIPT_ITEM_ID=
        CAST(@SERIAL_NO AS NVARCHAR(50)) + '000' + CAST(@incrementValue AS NVARCHAR(50));
		END


INSERT INTO MESS_PRINT_RECEIPT_DET_T(PRINT_RECEIPT_MST_ID,ITEM_ID,PRICE,QTY,AMOUNT,PR_DATE1,DEPT_ID1,GUEST1,ITEM_PRINT_RECEIPT_ID)
VALUES(@PRINT_RECEIPT_MST_ID,@ITEM_ID,@PRICE,@QTY,@AMOUNT,CONVERT(datetime, @PR_DATE,103),@DEPT_ID,@GUEST1,@PRINT_RECEIPT_ITEM_ID)
SET @PRINT_RECEIPT_ID_DET=SCOPE_IDENTITY()
END



--****************************************************************

GO
/****** Object:  StoredProcedure [dbo].[SP_DML_MESS_PRINT_RECEIPT_MST]    Script Date: 09-03-2024 14:15:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[SP_DML_MESS_PRINT_RECEIPT_MST]
(
	@FLAG CHAR(1) = NULL,
	@PRINT_MST_ID NUMERIC (9,0) =NULL,
	@PR_DATE varchar(50) = null,
	@COM_ID INT =NULL,
	@LOC_ID INT =NULL,
	@DEPT_ID INT =NULL,
	@FY_ID INT =NULL,
	@USER_ID INT =NULL,
	@CTR_MACH_ID INT =NULL,
	@GUEST BIT,
	@AMOUNT NUMERIC(12,2)=NULL,
	@CASH NUMERIC(12,2)=NULL,
	@CHANGE NUMERIC(12,2)=NULL,
	@REMARKS VARCHAR(100) =NULL,
	@ENTERED_BY VARCHAR(50) =NULL,
	@MODIFIED_BY VARCHAR(50) =NULL,
	@MACHINE_NAME VARCHAR(30) =NULL,
	@SERVER_NAME VARCHAR(100) =NULL,
	@ITEM_NAME VARCHAR(5000) =NULL,	
	@NAME VARCHAR(50)=NULL,
	@ADDRESS VARCHAR(500)=NULL,
	@MOBILE NUMERIC(20,0)=NULL,
	@TALUKA VARCHAR(50)=NULL,
	@DOC_TYPE VARCHAR(50)=NULL,
	@DOC_DETAIL VARCHAR(50)=NULL,
	@SUCCEED numeric(9,0) OUTPUT
	
)
AS
BEGIN
IF @FLAG = 'I'
	BEGIN
		DECLARE @SERIAL_NO NUMERIC(10,0)
		IF EXISTS(SELECT  * FROM MESS_PRINT_RECEIPT_MST_T 
		WHERE FY_ID = @FY_ID and COM_ID=@COM_ID and LOC_ID=@LOC_ID AND DEPT_ID=@DEPT_ID)--AND  PRINT_RECEIPT_MST_ID <> @@IDENTITY)
			BEGIN
				SELECT @SERIAL_NO = MAX(ISNULL(SERIAL_NO,0))+1 
				FROM MESS_PRINT_RECEIPT_MST_T WHERE  FY_ID = @FY_ID and COM_ID=@COM_ID AND LOC_ID=@LOC_ID AND DEPT_ID=@DEPT_ID
			END
			ELSE		
			BEGIN
				SET @SERIAL_NO = 1
			END
			
		INSERT INTO MESS_PRINT_RECEIPT_MST_T
            (
				PR_DATE,
				SERIAL_NO,
				COM_ID,
				LOC_ID,
				DEPT_ID,
				FY_ID,
				USER_ID,
				CTR_MACH_ID,
				GUEST,
				AMOUNT,
				CASH,
				CHANGE,
				REMARKS,
				ENTERED_BY,
				MODIFIED_BY,
				MACHINE_NAME,
				SERVER_NAME,
				ITEM_NAME,
				NAME,
				ADDRESS,
				MOBILE,
				TALUKA,
				DOC_TYPE,
				DOC_DETAIL
            )
		VALUES
			(
				
			CONVERT(DATETIME,@PR_DATE,103),
				@SERIAL_NO,
				@COM_ID,
				@LOC_ID,
				@DEPT_ID,
				@FY_ID,
				@USER_ID,
				@CTR_MACH_ID,
				@GUEST,
				@AMOUNT,
				@CASH,
				@CHANGE,
				@REMARKS,
				@ENTERED_BY,
				@MODIFIED_BY,
				@MACHINE_NAME,
				@SERVER_NAME,
				@ITEM_NAME,
				@NAME,
				@ADDRESS,
				@MOBILE,
				@TALUKA,
				@DOC_TYPE,
				@DOC_DETAIL
		)
		 set @SUCCEED= SCOPE_IDENTITY();
		
	END


	ELSE
	BEGIN
	IF @FLAG = 'U'
		BEGIN
		UPDATE MESS_PRINT_RECEIPT_MST_T
             SET 
             Guest=@GUEST,
             Amount=@AMOUNT,
             Cash=@CASH,
             Change=@CHANGE,
             Remarks=@REMARKS,
             Modified_By=@MODIFIED_BY,
             Modified_On=getDate(),
             Machine_Name=@MACHINE_NAME,
             Record_Modified_Count=Record_Modified_Count + 1            
             WHERE 
            PRINT_RECEIPT_MST_ID = @PRINT_MST_ID
    
		END	
		
	END		

END

--*****************************************************


GO

/****** Object:  View [dbo].[MESS_ITEM_RECEIPT_DATA_V]    Script Date: 09-03-2024 14:19:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



ALTER VIEW [dbo].[MESS_ITEM_RECEIPT_DATA_V]
AS
SELECT
CMT.DEPT_ID,  LMT.Location_Id, ISNULL(CMT.COUNTER_MACHINE_TITLE, '') AS COUNTER, 
                       ISNULL(LMT.Location_Name, '') AS Location_Name,
					   MST.SERIAL_NO, DET.ITEM_PRINT_RECEIPT_ID,
					   

U.User_Login_Name,MST.User_Id, MST.PR_DATE, MST.Name,MST.Address,MST.TALUKA,MST.AMOUNT AS TOTAL_AMOUNT,MST.CTR_MACH_ID,MST.DOC_TYPE,MST.DOC_DETAIL,MST.MOBILE,DET.ITEM_ID,I.ITEM_TITLE,MST.PRINT_RECEIPT_MST_ID
,DET.PRICE, DET.QTY,DET.AMOUNT,
convert(varchar,MST.PR_DATE,103) as DATE
FROM MESS_PRINT_RECEIPT_MST_T MST
INNER JOIN MESS_PRINT_RECEIPT_DET_T DET
ON MST.PRINT_RECEIPT_MST_ID=DET.PRINT_RECEIPT_MST_ID
LEFT JOIN BK_MESS_ITEM_MST_T_BK I
ON DET.ITEM_ID=I.ITEM_ID
LEFT JOIN sec_user_mst_t U ON MST.User_Id=U.User_Id
inner join COM_COUNTER_MACHINE_MST_T CMT ON MST.CTR_MACH_ID = CMT.CTR_MACH_ID 
inner join  dbo.COM_LOCATION_MST_T AS LMT ON CMT.LOC_ID = LMT.Location_Id where MST.User_Id=20





GO








